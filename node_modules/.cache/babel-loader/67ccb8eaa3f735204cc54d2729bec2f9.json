{"ast":null,"code":"import { __assign } from \"tslib\";\nexport function resolveEventStreamConfig(input) {\n  var eventSigner = input.signer;\n  var eventStreamPayloadHandler = input.eventStreamPayloadHandlerProvider(__assign(__assign({}, input), {\n    eventSigner: eventSigner\n  }));\n  return __assign(__assign({}, input), {\n    eventSigner: eventSigner,\n    eventStreamPayloadHandler: eventStreamPayloadHandler\n  });\n}","map":{"version":3,"mappings":";AA8BA,OAAM,SAAUA,wBAAV,CACJC,KADI,EACkD;EAEtD,IAAMC,WAAW,GAAGD,KAAK,CAACE,MAA1B;EACA,IAAMC,yBAAyB,GAAGH,KAAK,CAACI,iCAAN,CAAuCC,sBACpEL,KADoE,GAC/D;IACRC,WAAW;EADH,CAD+D,CAAvC,CAAlC;EAIA,6BACKD,KADL,GACU;IACRC,WAAW,aADH;IAERE,yBAAyB;EAFjB,CADV;AAKD","names":["resolveEventStreamConfig","input","eventSigner","signer","eventStreamPayloadHandler","eventStreamPayloadHandlerProvider","__assign"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/middleware-eventstream/src/configuration.ts"],"sourcesContent":["import {\n  Decoder,\n  Encoder,\n  EventSigner,\n  EventStreamPayloadHandler,\n  EventStreamPayloadHandlerProvider,\n} from \"@aws-sdk/types\";\n\nexport interface EventStreamInputConfig {}\n\nexport type EventStreamResolvedConfig = {\n  /**\n   * A signer that signs the event of a event stream\n   * @internal\n   */\n  eventSigner: EventSigner;\n  /**\n   * A handler that control the eventstream payload flow and sign the payload after payload stream starting to flow.\n   * @internal\n   */\n  eventStreamPayloadHandler: EventStreamPayloadHandler;\n};\n\ninterface PreviouslyResolved {\n  utf8Encoder: Encoder;\n  utf8Decoder: Decoder;\n  signer: any; //Should be Provider<EventSigner>; But this would unblock the client\n  eventStreamPayloadHandlerProvider: EventStreamPayloadHandlerProvider;\n}\n\nexport function resolveEventStreamConfig<T>(\n  input: T & PreviouslyResolved & EventStreamInputConfig\n): T & EventStreamResolvedConfig {\n  const eventSigner = input.signer;\n  const eventStreamPayloadHandler = input.eventStreamPayloadHandlerProvider({\n    ...input,\n    eventSigner,\n  });\n  return {\n    ...input,\n    eventSigner,\n    eventStreamPayloadHandler,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}