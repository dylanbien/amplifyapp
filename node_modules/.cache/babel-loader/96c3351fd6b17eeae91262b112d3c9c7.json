{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nexport var AccessDeniedException;\n\n(function (AccessDeniedException) {\n  /**\n   * @internal\n   */\n  AccessDeniedException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AccessDeniedException || (AccessDeniedException = {}));\n\nexport var ActiveContextTimeToLive;\n\n(function (ActiveContextTimeToLive) {\n  /**\n   * @internal\n   */\n  ActiveContextTimeToLive.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ActiveContextTimeToLive || (ActiveContextTimeToLive = {}));\n\nexport var ActiveContext;\n\n(function (ActiveContext) {\n  /**\n   * @internal\n   */\n  ActiveContext.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.contextAttributes && {\n      contextAttributes: SENSITIVE_STRING\n    });\n  };\n})(ActiveContext || (ActiveContext = {}));\n\nexport var AudioInputEvent;\n\n(function (AudioInputEvent) {\n  /**\n   * @internal\n   */\n  AudioInputEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AudioInputEvent || (AudioInputEvent = {}));\n\nexport var AudioResponseEvent;\n\n(function (AudioResponseEvent) {\n  /**\n   * @internal\n   */\n  AudioResponseEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AudioResponseEvent || (AudioResponseEvent = {}));\n\nexport var ConflictException;\n\n(function (ConflictException) {\n  /**\n   * @internal\n   */\n  ConflictException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ConflictException || (ConflictException = {}));\n\nexport var DeleteSessionRequest;\n\n(function (DeleteSessionRequest) {\n  /**\n   * @internal\n   */\n  DeleteSessionRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteSessionRequest || (DeleteSessionRequest = {}));\n\nexport var DeleteSessionResponse;\n\n(function (DeleteSessionResponse) {\n  /**\n   * @internal\n   */\n  DeleteSessionResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteSessionResponse || (DeleteSessionResponse = {}));\n\nexport var InternalServerException;\n\n(function (InternalServerException) {\n  /**\n   * @internal\n   */\n  InternalServerException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InternalServerException || (InternalServerException = {}));\n\nexport var ResourceNotFoundException;\n\n(function (ResourceNotFoundException) {\n  /**\n   * @internal\n   */\n  ResourceNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceNotFoundException || (ResourceNotFoundException = {}));\n\nexport var ThrottlingException;\n\n(function (ThrottlingException) {\n  /**\n   * @internal\n   */\n  ThrottlingException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ThrottlingException || (ThrottlingException = {}));\n\nexport var ValidationException;\n\n(function (ValidationException) {\n  /**\n   * @internal\n   */\n  ValidationException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ValidationException || (ValidationException = {}));\n\nexport var GetSessionRequest;\n\n(function (GetSessionRequest) {\n  /**\n   * @internal\n   */\n  GetSessionRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetSessionRequest || (GetSessionRequest = {}));\n\nexport var ConfirmationState;\n\n(function (ConfirmationState) {\n  ConfirmationState[\"CONFIRMED\"] = \"Confirmed\";\n  ConfirmationState[\"DENIED\"] = \"Denied\";\n  ConfirmationState[\"NONE\"] = \"None\";\n})(ConfirmationState || (ConfirmationState = {}));\n\nexport var Shape;\n\n(function (Shape) {\n  Shape[\"LIST\"] = \"List\";\n  Shape[\"SCALAR\"] = \"Scalar\";\n})(Shape || (Shape = {}));\n\nexport var Value;\n\n(function (Value) {\n  /**\n   * @internal\n   */\n  Value.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Value || (Value = {}));\n\nexport var IntentState;\n\n(function (IntentState) {\n  IntentState[\"FAILED\"] = \"Failed\";\n  IntentState[\"FULFILLED\"] = \"Fulfilled\";\n  IntentState[\"IN_PROGRESS\"] = \"InProgress\";\n  IntentState[\"READY_FOR_FULFILLMENT\"] = \"ReadyForFulfillment\";\n  IntentState[\"WAITING\"] = \"Waiting\";\n})(IntentState || (IntentState = {}));\n\nexport var ConfidenceScore;\n\n(function (ConfidenceScore) {\n  /**\n   * @internal\n   */\n  ConfidenceScore.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ConfidenceScore || (ConfidenceScore = {}));\n\nexport var SentimentType;\n\n(function (SentimentType) {\n  SentimentType[\"MIXED\"] = \"MIXED\";\n  SentimentType[\"NEGATIVE\"] = \"NEGATIVE\";\n  SentimentType[\"NEUTRAL\"] = \"NEUTRAL\";\n  SentimentType[\"POSITIVE\"] = \"POSITIVE\";\n})(SentimentType || (SentimentType = {}));\n\nexport var SentimentScore;\n\n(function (SentimentScore) {\n  /**\n   * @internal\n   */\n  SentimentScore.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SentimentScore || (SentimentScore = {}));\n\nexport var SentimentResponse;\n\n(function (SentimentResponse) {\n  /**\n   * @internal\n   */\n  SentimentResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SentimentResponse || (SentimentResponse = {}));\n\nexport var MessageContentType;\n\n(function (MessageContentType) {\n  MessageContentType[\"CUSTOM_PAYLOAD\"] = \"CustomPayload\";\n  MessageContentType[\"IMAGE_RESPONSE_CARD\"] = \"ImageResponseCard\";\n  MessageContentType[\"PLAIN_TEXT\"] = \"PlainText\";\n  MessageContentType[\"SSML\"] = \"SSML\";\n})(MessageContentType || (MessageContentType = {}));\n\nexport var Button;\n\n(function (Button) {\n  /**\n   * @internal\n   */\n  Button.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Button || (Button = {}));\n\nexport var ImageResponseCard;\n\n(function (ImageResponseCard) {\n  /**\n   * @internal\n   */\n  ImageResponseCard.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ImageResponseCard || (ImageResponseCard = {}));\n\nexport var Message;\n\n(function (Message) {\n  /**\n   * @internal\n   */\n  Message.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.content && {\n      content: SENSITIVE_STRING\n    });\n  };\n})(Message || (Message = {}));\n\nexport var DialogActionType;\n\n(function (DialogActionType) {\n  DialogActionType[\"CLOSE\"] = \"Close\";\n  DialogActionType[\"CONFIRM_INTENT\"] = \"ConfirmIntent\";\n  DialogActionType[\"DELEGATE\"] = \"Delegate\";\n  DialogActionType[\"ELICIT_INTENT\"] = \"ElicitIntent\";\n  DialogActionType[\"ELICIT_SLOT\"] = \"ElicitSlot\";\n})(DialogActionType || (DialogActionType = {}));\n\nexport var DialogAction;\n\n(function (DialogAction) {\n  /**\n   * @internal\n   */\n  DialogAction.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DialogAction || (DialogAction = {}));\n\nexport var BadGatewayException;\n\n(function (BadGatewayException) {\n  /**\n   * @internal\n   */\n  BadGatewayException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BadGatewayException || (BadGatewayException = {}));\n\nexport var DependencyFailedException;\n\n(function (DependencyFailedException) {\n  /**\n   * @internal\n   */\n  DependencyFailedException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DependencyFailedException || (DependencyFailedException = {}));\n\nexport var PutSessionResponse;\n\n(function (PutSessionResponse) {\n  /**\n   * @internal\n   */\n  PutSessionResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutSessionResponse || (PutSessionResponse = {}));\n\nexport var RecognizeUtteranceRequest;\n\n(function (RecognizeUtteranceRequest) {\n  /**\n   * @internal\n   */\n  RecognizeUtteranceRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign(__assign({}, obj), obj.sessionState && {\n      sessionState: SENSITIVE_STRING\n    }), obj.requestAttributes && {\n      requestAttributes: SENSITIVE_STRING\n    });\n  };\n})(RecognizeUtteranceRequest || (RecognizeUtteranceRequest = {}));\n\nexport var RecognizeUtteranceResponse;\n\n(function (RecognizeUtteranceResponse) {\n  /**\n   * @internal\n   */\n  RecognizeUtteranceResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(RecognizeUtteranceResponse || (RecognizeUtteranceResponse = {}));\n\nexport var ConversationMode;\n\n(function (ConversationMode) {\n  ConversationMode[\"AUDIO\"] = \"AUDIO\";\n  ConversationMode[\"TEXT\"] = \"TEXT\";\n})(ConversationMode || (ConversationMode = {}));\n\nexport var DisconnectionEvent;\n\n(function (DisconnectionEvent) {\n  /**\n   * @internal\n   */\n  DisconnectionEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DisconnectionEvent || (DisconnectionEvent = {}));\n\nexport var DTMFInputEvent;\n\n(function (DTMFInputEvent) {\n  /**\n   * @internal\n   */\n  DTMFInputEvent.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.inputCharacter && {\n      inputCharacter: SENSITIVE_STRING\n    });\n  };\n})(DTMFInputEvent || (DTMFInputEvent = {}));\n\nexport var PlaybackCompletionEvent;\n\n(function (PlaybackCompletionEvent) {\n  /**\n   * @internal\n   */\n  PlaybackCompletionEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PlaybackCompletionEvent || (PlaybackCompletionEvent = {}));\n\nexport var TextInputEvent;\n\n(function (TextInputEvent) {\n  /**\n   * @internal\n   */\n  TextInputEvent.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.text && {\n      text: SENSITIVE_STRING\n    });\n  };\n})(TextInputEvent || (TextInputEvent = {}));\n\nexport var HeartbeatEvent;\n\n(function (HeartbeatEvent) {\n  /**\n   * @internal\n   */\n  HeartbeatEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(HeartbeatEvent || (HeartbeatEvent = {}));\n\nexport var InputMode;\n\n(function (InputMode) {\n  InputMode[\"DTMF\"] = \"DTMF\";\n  InputMode[\"SPEECH\"] = \"Speech\";\n  InputMode[\"TEXT\"] = \"Text\";\n})(InputMode || (InputMode = {}));\n\nexport var PlaybackInterruptionReason;\n\n(function (PlaybackInterruptionReason) {\n  PlaybackInterruptionReason[\"DTMF_START_DETECTED\"] = \"DTMF_START_DETECTED\";\n  PlaybackInterruptionReason[\"TEXT_DETECTED\"] = \"TEXT_DETECTED\";\n  PlaybackInterruptionReason[\"VOICE_START_DETECTED\"] = \"VOICE_START_DETECTED\";\n})(PlaybackInterruptionReason || (PlaybackInterruptionReason = {}));\n\nexport var PlaybackInterruptionEvent;\n\n(function (PlaybackInterruptionEvent) {\n  /**\n   * @internal\n   */\n  PlaybackInterruptionEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PlaybackInterruptionEvent || (PlaybackInterruptionEvent = {}));\n\nexport var TextResponseEvent;\n\n(function (TextResponseEvent) {\n  /**\n   * @internal\n   */\n  TextResponseEvent.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.messages && {\n      messages: obj.messages.map(function (item) {\n        return Message.filterSensitiveLog(item);\n      })\n    });\n  };\n})(TextResponseEvent || (TextResponseEvent = {}));\n\nexport var TranscriptEvent;\n\n(function (TranscriptEvent) {\n  /**\n   * @internal\n   */\n  TranscriptEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TranscriptEvent || (TranscriptEvent = {}));\n\nexport var Slot;\n\n(function (Slot) {\n  /**\n   * @internal\n   */\n  Slot.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Slot || (Slot = {}));\n\nexport var Intent;\n\n(function (Intent) {\n  /**\n   * @internal\n   */\n  Intent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Intent || (Intent = {}));\n\nexport var Interpretation;\n\n(function (Interpretation) {\n  /**\n   * @internal\n   */\n  Interpretation.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Interpretation || (Interpretation = {}));\n\nexport var SessionState;\n\n(function (SessionState) {\n  /**\n   * @internal\n   */\n  SessionState.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.activeContexts && {\n      activeContexts: obj.activeContexts.map(function (item) {\n        return ActiveContext.filterSensitiveLog(item);\n      })\n    });\n  };\n})(SessionState || (SessionState = {}));\n\nexport var ConfigurationEvent;\n\n(function (ConfigurationEvent) {\n  /**\n   * @internal\n   */\n  ConfigurationEvent.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.welcomeMessages && {\n      welcomeMessages: obj.welcomeMessages.map(function (item) {\n        return Message.filterSensitiveLog(item);\n      })\n    });\n  };\n})(ConfigurationEvent || (ConfigurationEvent = {}));\n\nexport var PutSessionRequest;\n\n(function (PutSessionRequest) {\n  /**\n   * @internal\n   */\n  PutSessionRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.messages && {\n      messages: obj.messages.map(function (item) {\n        return Message.filterSensitiveLog(item);\n      })\n    });\n  };\n})(PutSessionRequest || (PutSessionRequest = {}));\n\nexport var RecognizeTextRequest;\n\n(function (RecognizeTextRequest) {\n  /**\n   * @internal\n   */\n  RecognizeTextRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.text && {\n      text: SENSITIVE_STRING\n    });\n  };\n})(RecognizeTextRequest || (RecognizeTextRequest = {}));\n\nexport var StartConversationRequestEventStream;\n\n(function (StartConversationRequestEventStream) {\n  StartConversationRequestEventStream.visit = function (value, visitor) {\n    if (value.ConfigurationEvent !== undefined) return visitor.ConfigurationEvent(value.ConfigurationEvent);\n    if (value.AudioInputEvent !== undefined) return visitor.AudioInputEvent(value.AudioInputEvent);\n    if (value.DTMFInputEvent !== undefined) return visitor.DTMFInputEvent(value.DTMFInputEvent);\n    if (value.TextInputEvent !== undefined) return visitor.TextInputEvent(value.TextInputEvent);\n    if (value.PlaybackCompletionEvent !== undefined) return visitor.PlaybackCompletionEvent(value.PlaybackCompletionEvent);\n    if (value.DisconnectionEvent !== undefined) return visitor.DisconnectionEvent(value.DisconnectionEvent);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n  /**\n   * @internal\n   */\n\n\n  StartConversationRequestEventStream.filterSensitiveLog = function (obj) {\n    var _a;\n\n    if (obj.ConfigurationEvent !== undefined) return {\n      ConfigurationEvent: ConfigurationEvent.filterSensitiveLog(obj.ConfigurationEvent)\n    };\n    if (obj.AudioInputEvent !== undefined) return {\n      AudioInputEvent: AudioInputEvent.filterSensitiveLog(obj.AudioInputEvent)\n    };\n    if (obj.DTMFInputEvent !== undefined) return {\n      DTMFInputEvent: DTMFInputEvent.filterSensitiveLog(obj.DTMFInputEvent)\n    };\n    if (obj.TextInputEvent !== undefined) return {\n      TextInputEvent: TextInputEvent.filterSensitiveLog(obj.TextInputEvent)\n    };\n    if (obj.PlaybackCompletionEvent !== undefined) return {\n      PlaybackCompletionEvent: PlaybackCompletionEvent.filterSensitiveLog(obj.PlaybackCompletionEvent)\n    };\n    if (obj.DisconnectionEvent !== undefined) return {\n      DisconnectionEvent: DisconnectionEvent.filterSensitiveLog(obj.DisconnectionEvent)\n    };\n    if (obj.$unknown !== undefined) return _a = {}, _a[obj.$unknown[0]] = \"UNKNOWN\", _a;\n  };\n})(StartConversationRequestEventStream || (StartConversationRequestEventStream = {}));\n\nexport var StartConversationRequest;\n\n(function (StartConversationRequest) {\n  /**\n   * @internal\n   */\n  StartConversationRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.requestEventStream && {\n      requestEventStream: \"STREAMING_CONTENT\"\n    });\n  };\n})(StartConversationRequest || (StartConversationRequest = {}));\n\nexport var GetSessionResponse;\n\n(function (GetSessionResponse) {\n  /**\n   * @internal\n   */\n  GetSessionResponse.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.messages && {\n      messages: obj.messages.map(function (item) {\n        return Message.filterSensitiveLog(item);\n      })\n    });\n  };\n})(GetSessionResponse || (GetSessionResponse = {}));\n\nexport var IntentResultEvent;\n\n(function (IntentResultEvent) {\n  /**\n   * @internal\n   */\n  IntentResultEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(IntentResultEvent || (IntentResultEvent = {}));\n\nexport var RecognizeTextResponse;\n\n(function (RecognizeTextResponse) {\n  /**\n   * @internal\n   */\n  RecognizeTextResponse.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.messages && {\n      messages: obj.messages.map(function (item) {\n        return Message.filterSensitiveLog(item);\n      })\n    });\n  };\n})(RecognizeTextResponse || (RecognizeTextResponse = {}));\n\nexport var StartConversationResponseEventStream;\n\n(function (StartConversationResponseEventStream) {\n  StartConversationResponseEventStream.visit = function (value, visitor) {\n    if (value.PlaybackInterruptionEvent !== undefined) return visitor.PlaybackInterruptionEvent(value.PlaybackInterruptionEvent);\n    if (value.TranscriptEvent !== undefined) return visitor.TranscriptEvent(value.TranscriptEvent);\n    if (value.IntentResultEvent !== undefined) return visitor.IntentResultEvent(value.IntentResultEvent);\n    if (value.TextResponseEvent !== undefined) return visitor.TextResponseEvent(value.TextResponseEvent);\n    if (value.AudioResponseEvent !== undefined) return visitor.AudioResponseEvent(value.AudioResponseEvent);\n    if (value.HeartbeatEvent !== undefined) return visitor.HeartbeatEvent(value.HeartbeatEvent);\n    if (value.AccessDeniedException !== undefined) return visitor.AccessDeniedException(value.AccessDeniedException);\n    if (value.ResourceNotFoundException !== undefined) return visitor.ResourceNotFoundException(value.ResourceNotFoundException);\n    if (value.ValidationException !== undefined) return visitor.ValidationException(value.ValidationException);\n    if (value.ThrottlingException !== undefined) return visitor.ThrottlingException(value.ThrottlingException);\n    if (value.InternalServerException !== undefined) return visitor.InternalServerException(value.InternalServerException);\n    if (value.ConflictException !== undefined) return visitor.ConflictException(value.ConflictException);\n    if (value.DependencyFailedException !== undefined) return visitor.DependencyFailedException(value.DependencyFailedException);\n    if (value.BadGatewayException !== undefined) return visitor.BadGatewayException(value.BadGatewayException);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n  /**\n   * @internal\n   */\n\n\n  StartConversationResponseEventStream.filterSensitiveLog = function (obj) {\n    var _a;\n\n    if (obj.PlaybackInterruptionEvent !== undefined) return {\n      PlaybackInterruptionEvent: PlaybackInterruptionEvent.filterSensitiveLog(obj.PlaybackInterruptionEvent)\n    };\n    if (obj.TranscriptEvent !== undefined) return {\n      TranscriptEvent: TranscriptEvent.filterSensitiveLog(obj.TranscriptEvent)\n    };\n    if (obj.IntentResultEvent !== undefined) return {\n      IntentResultEvent: IntentResultEvent.filterSensitiveLog(obj.IntentResultEvent)\n    };\n    if (obj.TextResponseEvent !== undefined) return {\n      TextResponseEvent: TextResponseEvent.filterSensitiveLog(obj.TextResponseEvent)\n    };\n    if (obj.AudioResponseEvent !== undefined) return {\n      AudioResponseEvent: AudioResponseEvent.filterSensitiveLog(obj.AudioResponseEvent)\n    };\n    if (obj.HeartbeatEvent !== undefined) return {\n      HeartbeatEvent: HeartbeatEvent.filterSensitiveLog(obj.HeartbeatEvent)\n    };\n    if (obj.AccessDeniedException !== undefined) return {\n      AccessDeniedException: AccessDeniedException.filterSensitiveLog(obj.AccessDeniedException)\n    };\n    if (obj.ResourceNotFoundException !== undefined) return {\n      ResourceNotFoundException: ResourceNotFoundException.filterSensitiveLog(obj.ResourceNotFoundException)\n    };\n    if (obj.ValidationException !== undefined) return {\n      ValidationException: ValidationException.filterSensitiveLog(obj.ValidationException)\n    };\n    if (obj.ThrottlingException !== undefined) return {\n      ThrottlingException: ThrottlingException.filterSensitiveLog(obj.ThrottlingException)\n    };\n    if (obj.InternalServerException !== undefined) return {\n      InternalServerException: InternalServerException.filterSensitiveLog(obj.InternalServerException)\n    };\n    if (obj.ConflictException !== undefined) return {\n      ConflictException: ConflictException.filterSensitiveLog(obj.ConflictException)\n    };\n    if (obj.DependencyFailedException !== undefined) return {\n      DependencyFailedException: DependencyFailedException.filterSensitiveLog(obj.DependencyFailedException)\n    };\n    if (obj.BadGatewayException !== undefined) return {\n      BadGatewayException: BadGatewayException.filterSensitiveLog(obj.BadGatewayException)\n    };\n    if (obj.$unknown !== undefined) return _a = {}, _a[obj.$unknown[0]] = \"UNKNOWN\", _a;\n  };\n})(StartConversationResponseEventStream || (StartConversationResponseEventStream = {}));\n\nexport var StartConversationResponse;\n\n(function (StartConversationResponse) {\n  /**\n   * @internal\n   */\n  StartConversationResponse.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.responseEventStream && {\n      responseEventStream: \"STREAMING_CONTENT\"\n    });\n  };\n})(StartConversationResponse || (StartConversationResponse = {}));","map":{"version":3,"mappings":"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","names":["SENSITIVE_STRING","AccessDeniedException","obj","ActiveContextTimeToLive","ActiveContext","contextAttributes","AudioInputEvent","AudioResponseEvent","ConflictException","DeleteSessionRequest","DeleteSessionResponse","InternalServerException","ResourceNotFoundException","ThrottlingException","ValidationException","GetSessionRequest","ConfirmationState","Shape","Value","IntentState","ConfidenceScore","SentimentType","SentimentScore","SentimentResponse","MessageContentType","Button","ImageResponseCard","Message","content","DialogActionType","DialogAction","BadGatewayException","DependencyFailedException","PutSessionResponse","RecognizeUtteranceRequest","sessionState","requestAttributes","RecognizeUtteranceResponse","ConversationMode","DisconnectionEvent","DTMFInputEvent","inputCharacter","PlaybackCompletionEvent","TextInputEvent","text","HeartbeatEvent","InputMode","PlaybackInterruptionReason","PlaybackInterruptionEvent","TextResponseEvent","messages","map","item","filterSensitiveLog","TranscriptEvent","Slot","Intent","Interpretation","SessionState","activeContexts","ConfigurationEvent","welcomeMessages","PutSessionRequest","RecognizeTextRequest","StartConversationRequestEventStream","value","visitor","undefined","_","$unknown","_a","StartConversationRequest","requestEventStream","GetSessionResponse","IntentResultEvent","RecognizeTextResponse","StartConversationResponseEventStream","StartConversationResponse","responseEventStream"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/models/models_0.ts"],"sourcesContent":["import { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from \"@aws-sdk/types\";\nimport { Readable } from \"stream\";\n\n/**\n * <p></p>\n */\nexport interface AccessDeniedException extends __SmithyException, $MetadataBearer {\n  name: \"AccessDeniedException\";\n  $fault: \"client\";\n  message: string | undefined;\n}\n\nexport namespace AccessDeniedException {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: AccessDeniedException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The time that a context is active. You can specify the time to live\n *          in seconds or in conversation turns.</p>\n */\nexport interface ActiveContextTimeToLive {\n  /**\n   * <p>The number of seconds that the context is active. You can specify\n   *          between 5 and 86400 seconds (24 hours).</p>\n   */\n  timeToLiveInSeconds: number | undefined;\n\n  /**\n   * <p>The number of turns that the context is active. You can specify up\n   *          to 20 turns. Each request and response from the bot is a turn.</p>\n   */\n  turnsToLive: number | undefined;\n}\n\nexport namespace ActiveContextTimeToLive {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ActiveContextTimeToLive): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Contains information about the contexts that a user is using in a\n *          session. You can configure Amazon Lex V2 to set a context when an intent is\n *          fulfilled, or you can set a context using the , , or  operations.</p>\n *          <p>Use a context to indicate to Amazon Lex V2 intents that should be used as\n *          follow-up intents. For example, if the active context is\n *             <code>order-fulfilled</code>, only intents that have\n *             <code>order-fulfilled</code> configured as a trigger are considered\n *          for follow up.</p>\n */\nexport interface ActiveContext {\n  /**\n   * <p>The name of the context.</p>\n   */\n  name: string | undefined;\n\n  /**\n   * <p>Indicates the number of turns or seconds that the context is active.\n   *          Once the time to live expires, the context is no longer returned in a\n   *          response.</p>\n   */\n  timeToLive: ActiveContextTimeToLive | undefined;\n\n  /**\n   * <p>A lis tof contexts active for the request. A context can be\n   *          activated when a previous intent is fulfilled, or by including the\n   *          context in the request.</p>\n   *          <p>If you don't specify a list of contexts, Amazon Lex will use the\n   *          current list of contexts for the session. If you specify an empty list,\n   *          all contexts for the session are cleared. </p>\n   */\n  contextAttributes: { [key: string]: string } | undefined;\n}\n\nexport namespace ActiveContext {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ActiveContext): any => ({\n    ...obj,\n    ...(obj.contextAttributes && { contextAttributes: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Represents a chunk of audio sent from the client application to\n *          Amazon Lex V2. The audio is all or part of an utterance from the user.</p>\n *          <p>Amazon Lex V2 accumulates audio chunks until it recognizes a natural pause\n *          in speech before processing the input.</p>\n */\nexport interface AudioInputEvent {\n  /**\n   * <p>An encoded stream of audio.</p>\n   */\n  audioChunk?: Uint8Array;\n\n  /**\n   * <p>The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit\n   *          mono-channel little-endian format. The value of the field should\n   *          be:</p>\n   *          <p>\n   *             <code>audio/lpcm; sample-rate=8000; sample-size-bits=16;\n   *             channel-count=1; is-big-endian=false</code>\n   *          </p>\n   */\n  contentType: string | undefined;\n\n  /**\n   * <p>A unique identifier that your application assigns to the event. You\n   *          can use this to identify events in logs.</p>\n   */\n  eventId?: string;\n\n  /**\n   * <p>A timestamp set by the client of the date and time that the event\n   *          was sent to Amazon Lex V2.</p>\n   */\n  clientTimestampMillis?: number;\n}\n\nexport namespace AudioInputEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: AudioInputEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An event sent from Amazon Lex V2 to your client application containing audio\n *          to play to the user. </p>\n */\nexport interface AudioResponseEvent {\n  /**\n   * <p>A chunk of the audio to play. </p>\n   */\n  audioChunk?: Uint8Array;\n\n  /**\n   * <p>The encoding of the audio chunk. This is the same as the encoding\n   *          configure in the <code>contentType</code> field of the\n   *             <code>ConfigurationEvent</code>.</p>\n   */\n  contentType?: string;\n\n  /**\n   * <p>A unique identifier of the event sent by Amazon Lex V2. The identifier is in\n   *          the form <code>RESPONSE-N</code>, where N is a number starting with one\n   *          and incremented for each event sent by Amazon Lex V2 in the current\n   *          session.</p>\n   */\n  eventId?: string;\n}\n\nexport namespace AudioResponseEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: AudioResponseEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface ConflictException extends __SmithyException, $MetadataBearer {\n  name: \"ConflictException\";\n  $fault: \"client\";\n  message: string | undefined;\n}\n\nexport namespace ConflictException {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ConflictException): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteSessionRequest {\n  /**\n   * <p>The identifier of the bot that contains the session data.</p>\n   */\n  botId: string | undefined;\n\n  /**\n   * <p>The alias identifier in use for the bot that contains the session\n   *          data.</p>\n   */\n  botAliasId: string | undefined;\n\n  /**\n   * <p>The locale where the session is in use.</p>\n   */\n  localeId: string | undefined;\n\n  /**\n   * <p>The identifier of the session to delete.</p>\n   */\n  sessionId: string | undefined;\n}\n\nexport namespace DeleteSessionRequest {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: DeleteSessionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteSessionResponse {\n  /**\n   * <p>The identifier of the bot that contained the session data.</p>\n   */\n  botId?: string;\n\n  /**\n   * <p>The alias identifier in use for the bot that contained the session\n   *          data.</p>\n   */\n  botAliasId?: string;\n\n  /**\n   * <p>The locale where the session was used.</p>\n   */\n  localeId?: string;\n\n  /**\n   * <p>The identifier of the deleted session.</p>\n   */\n  sessionId?: string;\n}\n\nexport namespace DeleteSessionResponse {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: DeleteSessionResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface InternalServerException extends __SmithyException, $MetadataBearer {\n  name: \"InternalServerException\";\n  $fault: \"server\";\n  message: string | undefined;\n}\n\nexport namespace InternalServerException {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: InternalServerException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceNotFoundException\";\n  $fault: \"client\";\n  message: string | undefined;\n}\n\nexport namespace ResourceNotFoundException {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ResourceNotFoundException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface ThrottlingException extends __SmithyException, $MetadataBearer {\n  name: \"ThrottlingException\";\n  $fault: \"client\";\n  message: string | undefined;\n}\n\nexport namespace ThrottlingException {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ThrottlingException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface ValidationException extends __SmithyException, $MetadataBearer {\n  name: \"ValidationException\";\n  $fault: \"client\";\n  message: string | undefined;\n}\n\nexport namespace ValidationException {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ValidationException): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetSessionRequest {\n  /**\n   * <p>The identifier of the bot that contains the session data.</p>\n   */\n  botId: string | undefined;\n\n  /**\n   * <p>The alias identifier in use for the bot that contains the session\n   *          data.</p>\n   */\n  botAliasId: string | undefined;\n\n  /**\n   * <p>The locale where the session is in use.</p>\n   */\n  localeId: string | undefined;\n\n  /**\n   * <p>The identifier of the session to return.</p>\n   */\n  sessionId: string | undefined;\n}\n\nexport namespace GetSessionRequest {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: GetSessionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum ConfirmationState {\n  CONFIRMED = \"Confirmed\",\n  DENIED = \"Denied\",\n  NONE = \"None\",\n}\n\nexport enum Shape {\n  LIST = \"List\",\n  SCALAR = \"Scalar\",\n}\n\n/**\n * <p>The value of a slot.</p>\n */\nexport interface Value {\n  /**\n   * <p>The text of the utterance from the user that was entered for the\n   *          slot.</p>\n   */\n  originalValue?: string;\n\n  /**\n   * <p>The value that Amazon Lex V2 determines for the slot. The actual value\n   *          depends on the setting of the value selection strategy for the bot. You\n   *          can choose to use the value entered by the user, or you can have Amazon Lex V2\n   *          choose the first value in the <code>resolvedValues</code> list.</p>\n   */\n  interpretedValue: string | undefined;\n\n  /**\n   * <p>A list of additional values that have been recognized for the\n   *          slot.</p>\n   */\n  resolvedValues?: string[];\n}\n\nexport namespace Value {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: Value): any => ({\n    ...obj,\n  });\n}\n\nexport enum IntentState {\n  FAILED = \"Failed\",\n  FULFILLED = \"Fulfilled\",\n  IN_PROGRESS = \"InProgress\",\n  READY_FOR_FULFILLMENT = \"ReadyForFulfillment\",\n  WAITING = \"Waiting\",\n}\n\n/**\n * <p>Provides a score that indicates the confidence that Amazon Lex V2 has that\n *          an intent is the one that satisfies the user's intent.</p>\n */\nexport interface ConfidenceScore {\n  /**\n   * <p>A score that indicates how confident Amazon Lex V2 is that an intent\n   *          satisfies the user's intent. Ranges between 0.00 and 1.00. Higher\n   *          scores indicate higher confidence.</p>\n   */\n  score?: number;\n}\n\nexport namespace ConfidenceScore {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ConfidenceScore): any => ({\n    ...obj,\n  });\n}\n\nexport enum SentimentType {\n  MIXED = \"MIXED\",\n  NEGATIVE = \"NEGATIVE\",\n  NEUTRAL = \"NEUTRAL\",\n  POSITIVE = \"POSITIVE\",\n}\n\n/**\n * <p>The individual sentiment responses for the utterance.</p>\n */\nexport interface SentimentScore {\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy\n   *          of its detection of the <code>POSITIVE</code> sentiment.</p>\n   */\n  positive?: number;\n\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy\n   *          of its detection of the <code>NEGATIVE</code> sentiment.</p>\n   */\n  negative?: number;\n\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy\n   *          of its detection of the <code>NEUTRAL</code> sentiment.</p>\n   */\n  neutral?: number;\n\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy\n   *          of its detection of the <code>MIXED</code> sentiment.</p>\n   */\n  mixed?: number;\n}\n\nexport namespace SentimentScore {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: SentimentScore): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about the sentiment expressed in a user's\n *          response in a conversation. Sentiments are determined using Amazon\n *          Comprehend. Sentiments are only returned if they are enabled for the\n *          bot.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-sentiment.html\">\n *             Determine Sentiment </a> in the <i>Amazon Comprehend\n *             developer guide</i>.</p>\n */\nexport interface SentimentResponse {\n  /**\n   * <p>The overall sentiment expressed in the user's response. This is the\n   *          sentiment most likely expressed by the user based on the analysis by\n   *          Amazon Comprehend.</p>\n   */\n  sentiment?: SentimentType | string;\n\n  /**\n   * <p>The individual sentiment responses for the utterance.</p>\n   */\n  sentimentScore?: SentimentScore;\n}\n\nexport namespace SentimentResponse {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: SentimentResponse): any => ({\n    ...obj,\n  });\n}\n\nexport enum MessageContentType {\n  CUSTOM_PAYLOAD = \"CustomPayload\",\n  IMAGE_RESPONSE_CARD = \"ImageResponseCard\",\n  PLAIN_TEXT = \"PlainText\",\n  SSML = \"SSML\",\n}\n\n/**\n * <p>A button that appears on a response card show to the user.</p>\n */\nexport interface Button {\n  /**\n   * <p>The text that is displayed on the button.</p>\n   */\n  text: string | undefined;\n\n  /**\n   * <p>The value returned to Amazon Lex V2 when a user chooses the button.</p>\n   */\n  value: string | undefined;\n}\n\nexport namespace Button {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: Button): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A card that is shown to the user by a messaging platform. You define\n *          the contents of the card, the card is displayed by the platform. </p>\n *          <p>When you use a response card, the response from the user is\n *          constrained to the text associated with a button on the card.</p>\n */\nexport interface ImageResponseCard {\n  /**\n   * <p>The title to display on the response card. The format of the title\n   *          is determined by the platform displaying the response card.</p>\n   */\n  title: string | undefined;\n\n  /**\n   * <p>The subtitle to display on the response card. The format of the\n   *          subtitle is determined by the platform displaying the response\n   *          card.</p>\n   */\n  subtitle?: string;\n\n  /**\n   * <p>The URL of an image to display on the response card. The image URL\n   *          must be publicly available so that the platform displaying the response\n   *          card has access to the image.</p>\n   */\n  imageUrl?: string;\n\n  /**\n   * <p>A list of buttons that should be displayed on the response card. The\n   *          arrangement of the buttons is determined by the platform that displays\n   *          the button.</p>\n   */\n  buttons?: Button[];\n}\n\nexport namespace ImageResponseCard {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ImageResponseCard): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for text that is returned to the customer..</p>\n */\nexport interface Message {\n  /**\n   * <p>The text of the message.</p>\n   */\n  content?: string;\n\n  /**\n   * <p>Indicates the type of response.</p>\n   */\n  contentType: MessageContentType | string | undefined;\n\n  /**\n   * <p>A card that is shown to the user by a messaging platform. You define\n   *          the contents of the card, the card is displayed by the platform. </p>\n   *          <p>When you use a response card, the response from the user is\n   *          constrained to the text associated with a button on the card.</p>\n   */\n  imageResponseCard?: ImageResponseCard;\n}\n\nexport namespace Message {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: Message): any => ({\n    ...obj,\n    ...(obj.content && { content: SENSITIVE_STRING }),\n  });\n}\n\nexport enum DialogActionType {\n  CLOSE = \"Close\",\n  CONFIRM_INTENT = \"ConfirmIntent\",\n  DELEGATE = \"Delegate\",\n  ELICIT_INTENT = \"ElicitIntent\",\n  ELICIT_SLOT = \"ElicitSlot\",\n}\n\n/**\n * <p>The next action that Amazon Lex V2 should take.</p>\n */\nexport interface DialogAction {\n  /**\n   * <p>The next action that the bot should take in its interaction with the\n   *          user. The possible values are:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>Close</code> - Indicates that there will not be a\n   *                response from the user. For example, the statement \"Your order\n   *                has been placed\" does not require a response.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ConfirmIntent</code> - The next action is asking the\n   *                user if the intent is complete and ready to be fulfilled. This is\n   *                a yes/no question such as \"Place the order?\"</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Delegate</code> - The next action is determined by\n   *                Amazon Lex V2.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ElicitSlot</code> - The next action is to elicit a slot\n   *                value from the user.</p>\n   *             </li>\n   *          </ul>\n   */\n  type: DialogActionType | string | undefined;\n\n  /**\n   * <p>The name of the slot that should be elicited from the user.</p>\n   */\n  slotToElicit?: string;\n}\n\nexport namespace DialogAction {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: DialogAction): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface BadGatewayException extends __SmithyException, $MetadataBearer {\n  name: \"BadGatewayException\";\n  $fault: \"server\";\n  message: string | undefined;\n}\n\nexport namespace BadGatewayException {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: BadGatewayException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface DependencyFailedException extends __SmithyException, $MetadataBearer {\n  name: \"DependencyFailedException\";\n  $fault: \"client\";\n  message: string | undefined;\n}\n\nexport namespace DependencyFailedException {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: DependencyFailedException): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutSessionResponse {\n  /**\n   * <p>The type of response. Same as the type specified in the\n   *             <code>responseContentType</code> field in the request.</p>\n   */\n  contentType?: string;\n\n  /**\n   * <p>A list of messages that were last sent to the user. The messages are\n   *          ordered based on how you return the messages from you Lambda function\n   *          or the order that the messages are defined in the bot.</p>\n   */\n  messages?: string;\n\n  /**\n   * <p>Represents the current state of the dialog between the user and the\n   *          bot.</p>\n   *          <p>Use this to determine the progress of the conversation and what the\n   *          next action may be.</p>\n   */\n  sessionState?: string;\n\n  /**\n   * <p>Request-specific information passed between the client application\n   *          and Amazon Lex V2. These are the same as the <code>requestAttribute</code>\n   *          parameter in the call to the <code>PutSession</code> operation.</p>\n   */\n  requestAttributes?: string;\n\n  /**\n   * <p>The identifier of the session that received the data.</p>\n   */\n  sessionId?: string;\n\n  /**\n   * <p>If the requested content type was audio, the audio version of the\n   *          message to convey to the user.</p>\n   */\n  audioStream?: Readable | ReadableStream | Blob;\n}\n\nexport namespace PutSessionResponse {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: PutSessionResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface RecognizeUtteranceRequest {\n  /**\n   * <p>The identifier of the bot that should receive the request.</p>\n   */\n  botId: string | undefined;\n\n  /**\n   * <p>The alias identifier in use for the bot that should receive the\n   *          request.</p>\n   */\n  botAliasId: string | undefined;\n\n  /**\n   * <p>The locale where the session is in use.</p>\n   */\n  localeId: string | undefined;\n\n  /**\n   * <p>The identifier of the session in use.</p>\n   */\n  sessionId: string | undefined;\n\n  /**\n   * <p>Sets the state of the session with the user. You can use this to set\n   *          the current intent, attributes, context, and dialog action. Use the\n   *          dialog action to determine the next step that Amazon Lex V2 should use in the\n   *          conversation with the user.</p>\n   *          <p>The <code>sessionState</code> field must be compressed using gzip\n   *          and then base64 encoded before sending to Amazon Lex V2.</p>\n   */\n  sessionState?: string;\n\n  /**\n   * <p>Request-specific information passed between the client application\n   *          and Amazon Lex V2 </p>\n   *          <p>The namespace <code>x-amz-lex:</code> is reserved for special\n   *          attributes. Don't create any request attributes for prefix\n   *             <code>x-amz-lex:</code>.</p>\n   *          <p>The <code>requestAttributes</code> field must be compressed using\n   *          gzip and then base64 encoded before sending to Amazon Lex V2.</p>\n   */\n  requestAttributes?: string;\n\n  /**\n   * <p>Indicates the format for audio input or that the content is text.\n   *          The header must start with one of the following prefixes:</p>\n   *          <ul>\n   *             <li>\n   *                <p>PCM format, audio data must be in little-endian byte\n   *                order.</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>audio/l16; rate=16000; channels=1</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/x-l16; sample-rate=16000; channel-count=1</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;\n   *                      channel-count=1; is-big-endian=false</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <p>Opus format</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <p>Text format</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>text/plain; charset=utf-8</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *          </ul>\n   */\n  requestContentType: string | undefined;\n\n  /**\n   * <p>The message that Amazon Lex V2 returns in the response can be either text or\n   *          speech based on the <code>responseContentType</code> value.</p>\n   *          <ul>\n   *             <li>\n   *                <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex V2\n   *                returns text in the response.</p>\n   *             </li>\n   *             <li>\n   *                <p>If the value begins with <code>audio/</code>, Amazon Lex V2 returns\n   *                speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech\n   *                using the configuration that you specified in the\n   *                   <code>requestContentType</code> parameter. For example, if you\n   *                specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns\n   *                speech in the MPEG format.</p>\n   *             </li>\n   *             <li>\n   *                <p>If the value is <code>audio/pcm</code>, the speech returned is\n   *                   <code>audio/pcm</code> at 16 KHz in 16-bit, little-endian\n   *                format.</p>\n   *             </li>\n   *             <li>\n   *                <p>The following are the accepted values:</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>audio/mpeg</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/ogg</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/pcm (16 KHz)</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/* (defaults to mpeg)</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>text/plain; charset=utf-8</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *          </ul>\n   */\n  responseContentType?: string;\n\n  /**\n   * <p>User input in PCM or Opus audio format or text format as described\n   *          in the <code>requestContentType</code> parameter.</p>\n   */\n  inputStream?: Readable | ReadableStream | Blob;\n}\n\nexport namespace RecognizeUtteranceRequest {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: RecognizeUtteranceRequest): any => ({\n    ...obj,\n    ...(obj.sessionState && { sessionState: SENSITIVE_STRING }),\n    ...(obj.requestAttributes && { requestAttributes: SENSITIVE_STRING }),\n  });\n}\n\nexport interface RecognizeUtteranceResponse {\n  /**\n   * <p>Indicates whether the input mode to the operation was text or\n   *          speech.\n   *       </p>\n   */\n  inputMode?: string;\n\n  /**\n   * <p>Content type as specified in the <code>responseContentType</code> in\n   *          the request.</p>\n   */\n  contentType?: string;\n\n  /**\n   * <p>A list of messages that were last sent to the user. The messages are\n   *          ordered based on the order that you returned the messages from your\n   *          Lambda function or the order that the messages are defined in the\n   *          bot.</p>\n   *          <p>The <code>messages</code> field is compressed with gzip and then\n   *          base64 encoded. Before you can use the contents of the field, you must\n   *          decode and decompress the contents. See the example for a simple\n   *          function to decode and decompress the contents.</p>\n   */\n  messages?: string;\n\n  /**\n   * <p>A list of intents that Amazon Lex V2 determined might satisfy the user's\n   *          utterance.</p>\n   *          <p>Each interpretation includes the intent, a score that indicates how\n   *          confident Amazon Lex V2 is that the interpretation is the correct one, and an\n   *          optional sentiment response that indicates the sentiment expressed in\n   *          the utterance.</p>\n   *          <p>The <code>interpretations</code> field is compressed with gzip and\n   *          then base64 encoded. Before you can use the contents of the field, you\n   *          must decode and decompress the contents. See the example for a simple\n   *          function to decode and decompress the contents.</p>\n   */\n  interpretations?: string;\n\n  /**\n   * <p>Represents the current state of the dialog between the user and the\n   *          bot.</p>\n   *          <p>Use this to determine the progress of the conversation and what the\n   *          next action might be.</p>\n   *          <p>The <code>sessionState</code> field is compressed with gzip and then\n   *          base64 encoded. Before you can use the contents of the field, you must\n   *          decode and decompress the contents. See the example for a simple\n   *          function to decode and decompress the contents.</p>\n   */\n  sessionState?: string;\n\n  /**\n   * <p>The attributes sent in the request.</p>\n   *          <p>The <code>requestAttributes</code> field is compressed with gzip and\n   *          then base64 encoded. Before you can use the contents of the field, you\n   *          must decode and decompress the contents.</p>\n   */\n  requestAttributes?: string;\n\n  /**\n   * <p>The identifier of the session in use.</p>\n   */\n  sessionId?: string;\n\n  /**\n   * <p>The text used to process the request.</p>\n   *          <p>If the input was an audio stream, the <code>inputTranscript</code>\n   *          field contains the text extracted from the audio stream. This is the\n   *          text that is actually processed to recognize intents and slot values.\n   *          You can use this information to determine if Amazon Lex V2 is correctly\n   *          processing the audio that you send.</p>\n   *          <p>The <code>inputTranscript</code> field is compressed with gzip and\n   *          then base64 encoded. Before you can use the contents of the field, you\n   *          must decode and decompress the contents. See the example for a simple\n   *          function to decode and decompress the contents.</p>\n   */\n  inputTranscript?: string;\n\n  /**\n   * <p>The prompt or statement to send to the user. This is based on the\n   *          bot configuration and context. For example, if Amazon Lex V2 did not understand\n   *          the user intent, it sends the <code>clarificationPrompt</code>\n   *          configured for the bot. If the intent requires confirmation before\n   *          taking the fulfillment action, it sends the\n   *             <code>confirmationPrompt</code>. Another example: Suppose that the\n   *          Lambda function successfully fulfilled the intent, and sent a message\n   *          to convey to the user. Then Amazon Lex V2 sends that message in the\n   *          response.</p>\n   */\n  audioStream?: Readable | ReadableStream | Blob;\n}\n\nexport namespace RecognizeUtteranceResponse {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: RecognizeUtteranceResponse): any => ({\n    ...obj,\n  });\n}\n\nexport enum ConversationMode {\n  AUDIO = \"AUDIO\",\n  TEXT = \"TEXT\",\n}\n\n/**\n * <p>A notification from the client that it is disconnecting from Amazon Lex V2.\n *          Sending a <code>DisconnectionEvent</code> event is optional, but can\n *          help identify a conversation in logs.</p>\n */\nexport interface DisconnectionEvent {\n  /**\n   * <p>A unique identifier that your application assigns to the event. You\n   *          can use this to identify events in logs.</p>\n   */\n  eventId?: string;\n\n  /**\n   * <p>A timestamp set by the client of the date and time that the event\n   *          was sent to Amazon Lex V2.</p>\n   */\n  clientTimestampMillis?: number;\n}\n\nexport namespace DisconnectionEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: DisconnectionEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A DTMF character sent from the client application. DTMF characters\n *          are typically sent from a phone keypad to represent numbers. For\n *          example, you can have Amazon Lex V2 process a credit card number input from a\n *          phone.</p>\n */\nexport interface DTMFInputEvent {\n  /**\n   * <p>The DTMF character that the user pressed. The allowed characters are\n   *          A - D, 0 - 9, # and *.</p>\n   */\n  inputCharacter: string | undefined;\n\n  /**\n   * <p>A unique identifier that your application assigns to the event. You\n   *          can use this to identify events in logs.</p>\n   */\n  eventId?: string;\n\n  /**\n   * <p>A timestamp set by the client of the date and time that the event\n   *          was sent to Amazon Lex V2.</p>\n   */\n  clientTimestampMillis?: number;\n}\n\nexport namespace DTMFInputEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: DTMFInputEvent): any => ({\n    ...obj,\n    ...(obj.inputCharacter && { inputCharacter: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Event sent from the client application to Amazon Lex V2 to indicate that\n *          playback of audio is complete and that Amazon Lex V2 should start processing\n *          the user's input.</p>\n */\nexport interface PlaybackCompletionEvent {\n  /**\n   * <p>A unique identifier that your application assigns to the event. You\n   *          can use this to identify events in logs.</p>\n   */\n  eventId?: string;\n\n  /**\n   * <p>A timestamp set by the client of the date and time that the event\n   *          was sent to Amazon Lex V2.</p>\n   */\n  clientTimestampMillis?: number;\n}\n\nexport namespace PlaybackCompletionEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: PlaybackCompletionEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The event sent from your client application to Amazon Lex V2 with text input\n *          from the user.</p>\n */\nexport interface TextInputEvent {\n  /**\n   * <p>The text from the user. Amazon Lex V2 processes this as a complete\n   *          statement.</p>\n   */\n  text: string | undefined;\n\n  /**\n   * <p>A unique identifier that your application assigns to the event. You\n   *          can use this to identify events in logs.</p>\n   */\n  eventId?: string;\n\n  /**\n   * <p>A timestamp set by the client of the date and time that the event\n   *          was sent to Amazon Lex V2.</p>\n   */\n  clientTimestampMillis?: number;\n}\n\nexport namespace TextInputEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: TextInputEvent): any => ({\n    ...obj,\n    ...(obj.text && { text: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Event that Amazon Lex V2 sends to indicate that the stream is still open\n *          between the client application and Amazon Lex V2 </p>\n */\nexport interface HeartbeatEvent {\n  /**\n   * <p>A unique identifier of the event sent by Amazon Lex V2. The identifier is in\n   *          the form <code>RESPONSE-N</code>, where N is a number starting with one\n   *          and incremented for each event sent by Amazon Lex V2 in the current\n   *          session.</p>\n   */\n  eventId?: string;\n}\n\nexport namespace HeartbeatEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: HeartbeatEvent): any => ({\n    ...obj,\n  });\n}\n\nexport enum InputMode {\n  DTMF = \"DTMF\",\n  SPEECH = \"Speech\",\n  TEXT = \"Text\",\n}\n\nexport enum PlaybackInterruptionReason {\n  DTMF_START_DETECTED = \"DTMF_START_DETECTED\",\n  TEXT_DETECTED = \"TEXT_DETECTED\",\n  VOICE_START_DETECTED = \"VOICE_START_DETECTED\",\n}\n\n/**\n * <p>Event sent from Amazon Lex V2 to indicate to the client application should\n *          stop playback of audio. For example, if the client is playing a prompt\n *          that asks for the user's telephone number, the user might start to say\n *          the phone number before the prompt is complete. Amazon Lex V2 sends this event\n *          to the client application to indicate that the user is responding and\n *          that Amazon Lex V2 is processing their input.</p>\n */\nexport interface PlaybackInterruptionEvent {\n  /**\n   * <p>Indicates the type of user input that Amazon Lex V2 detected.</p>\n   */\n  eventReason?: PlaybackInterruptionReason | string;\n\n  /**\n   * <p>The identifier of the event that contained the audio, DTMF, or text\n   *          that caused the interruption.</p>\n   */\n  causedByEventId?: string;\n\n  /**\n   * <p>A unique identifier of the event sent by Amazon Lex V2. The identifier is in\n   *          the form <code>RESPONSE-N</code>, where N is a number starting with one\n   *          and incremented for each event sent by Amazon Lex V2 in the current\n   *          session.</p>\n   */\n  eventId?: string;\n}\n\nexport namespace PlaybackInterruptionEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: PlaybackInterruptionEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The event sent from Amazon Lex V2 to your application with text to present\n *          to the user.</p>\n */\nexport interface TextResponseEvent {\n  /**\n   * <p>A list of messages to send to the user. Messages are ordered based\n   *          on the order that you returned the messages from your Lambda function\n   *          or the order that the messages are defined in the bot.</p>\n   */\n  messages?: Message[];\n\n  /**\n   * <p>A unique identifier of the event sent by Amazon Lex V2. The identifier is in\n   *          the form <code>RESPONSE-N</code>, where N is a number starting with one\n   *          and incremented for each event sent by Amazon Lex V2 in the current\n   *          session.</p>\n   */\n  eventId?: string;\n}\n\nexport namespace TextResponseEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: TextResponseEvent): any => ({\n    ...obj,\n    ...(obj.messages && { messages: obj.messages.map((item) => Message.filterSensitiveLog(item)) }),\n  });\n}\n\n/**\n * <p>Event sent from Amazon Lex V2 to your client application that contains a\n *          transcript of voice audio. </p>\n */\nexport interface TranscriptEvent {\n  /**\n   * <p>The transcript of the voice audio from the user.</p>\n   */\n  transcript?: string;\n\n  /**\n   * <p>A unique identifier of the event sent by Amazon Lex V2. The identifier is in\n   *          the form <code>RESPONSE-N</code>, where N is a number starting with one\n   *          and incremented for each event sent by Amazon Lex V2 in the current\n   *          session.</p>\n   */\n  eventId?: string;\n}\n\nexport namespace TranscriptEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: TranscriptEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A value that Amazon Lex V2 uses to fulfill an intent. </p>\n */\nexport interface Slot {\n  /**\n   * <p>The current value of the slot.</p>\n   */\n  value?: Value;\n\n  /**\n   * <p>When the <code>shape</code> value is <code>List</code>, it indicates\n   *          that the <code>values</code> field contains a list of slot values. When\n   *          the value is <code>Scalar</code>, it indicates that the\n   *             <code>value</code> field contains a single value.</p>\n   */\n  shape?: Shape | string;\n\n  /**\n   * <p>A list of one or more values that the user provided for the slot.\n   *       For example, if a for a slot that elicits pizza toppings, the values might\n   *       be \"pepperoni\" and \"pineapple.\" </p>\n   */\n  values?: Slot[];\n}\n\nexport namespace Slot {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: Slot): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The current intent that Amazon Lex V2 is attempting to fulfill.</p>\n */\nexport interface Intent {\n  /**\n   * <p>The name of the intent.</p>\n   */\n  name: string | undefined;\n\n  /**\n   * <p>A map of all of the slots for the intent. The name of the slot maps\n   *          to the value of the slot. If a slot has not been filled, the value is\n   *          null.</p>\n   */\n  slots?: { [key: string]: Slot };\n\n  /**\n   * <p>Contains fulfillment information for the intent. </p>\n   */\n  state?: IntentState | string;\n\n  /**\n   * <p>Contains information about whether fulfillment of the intent has\n   *          been confirmed.</p>\n   */\n  confirmationState?: ConfirmationState | string;\n}\n\nexport namespace Intent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: Intent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An intent that Amazon Lex V2 determined might satisfy the user's utterance.\n *          The intents are ordered by the confidence score. </p>\n */\nexport interface Interpretation {\n  /**\n   * <p>Determines the threshold where Amazon Lex V2 will insert the\n   *             <code>AMAZON.FallbackIntent</code>,\n   *             <code>AMAZON.KendraSearchIntent</code>, or both when returning\n   *          alternative intents in a response. <code>AMAZON.FallbackIntent</code>\n   *          and <code>AMAZON.KendraSearchIntent</code> are only inserted if they\n   *          are configured for the bot.</p>\n   */\n  nluConfidence?: ConfidenceScore;\n\n  /**\n   * <p>The sentiment expressed in an utterance. </p>\n   *          <p>When the bot is configured to send utterances to Amazon Comprehend\n   *          for sentiment analysis, this field contains the result of the\n   *          analysis.</p>\n   */\n  sentimentResponse?: SentimentResponse;\n\n  /**\n   * <p>A list of intents that might satisfy the user's utterance. The\n   *          intents are ordered by the confidence score.</p>\n   */\n  intent?: Intent;\n}\n\nexport namespace Interpretation {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: Interpretation): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The state of the user's session with Amazon Lex V2.</p>\n */\nexport interface SessionState {\n  /**\n   * <p>The next step that Amazon Lex V2 should take in the conversation with a\n   *          user.</p>\n   */\n  dialogAction?: DialogAction;\n\n  /**\n   * <p>The active intent that Amazon Lex V2 is processing.</p>\n   */\n  intent?: Intent;\n\n  /**\n   * <p>One or more contexts that indicate to Amazon Lex V2 the context of a\n   *          request. When a context is active, Amazon Lex V2 considers intents with the\n   *          matching context as a trigger as the next intent in a session.</p>\n   */\n  activeContexts?: ActiveContext[];\n\n  /**\n   * <p>Map of key/value pairs representing session-specific context\n   *          information. It contains application information passed between Amazon Lex V2\n   *          and a client application.</p>\n   */\n  sessionAttributes?: { [key: string]: string };\n\n  /**\n   * <p></p>\n   */\n  originatingRequestId?: string;\n}\n\nexport namespace SessionState {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: SessionState): any => ({\n    ...obj,\n    ...(obj.activeContexts && {\n      activeContexts: obj.activeContexts.map((item) => ActiveContext.filterSensitiveLog(item)),\n    }),\n  });\n}\n\n/**\n * <p>The initial event sent from the application to Amazon Lex V2 to configure\n *          the conversation, including session and request attributes and the\n *          response content type.</p>\n */\nexport interface ConfigurationEvent {\n  /**\n   * <p>Request-specific information passed between the client application\n   *          and Amazon Lex V2.</p>\n   *          <p>The namespace <code>x-amz-lex:</code> is reserved for special\n   *          attributes. Don't create any request attributes for prefix\n   *             <code>x-amz-lex:</code>.</p>\n   */\n  requestAttributes?: { [key: string]: string };\n\n  /**\n   * <p>The message that Amazon Lex V2 returns in the response can be either text or\n   *          speech based on the <code>responseContentType</code> value.</p>\n   *          <ul>\n   *             <li>\n   *                <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex V2\n   *                returns text in the response.</p>\n   *             </li>\n   *             <li>\n   *                <p>If the value begins with <code>audio/</code>, Amazon Lex V2 returns\n   *                speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech\n   *                using the configuration that you specified in the\n   *                   <code>requestContentType</code> parameter. For example, if you\n   *                specify <code>audio/mpeg</code> as the value, Amazon Lex V2 returns\n   *                speech in the MPEG format.</p>\n   *             </li>\n   *             <li>\n   *                <p>If the value is <code>audio/pcm</code>, the speech returned is\n   *                audio/pcm in 16-bit, little-endian format.</p>\n   *             </li>\n   *             <li>\n   *                <p>The following are the accepted values:</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>audio/mpeg</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/ogg</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/pcm</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>audio/* (defaults to mpeg)</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>text/plain; charset=utf-8</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *          </ul>\n   */\n  responseContentType: string | undefined;\n\n  /**\n   * <p>The state of the user's session with Amazon Lex V2.</p>\n   */\n  sessionState?: SessionState;\n\n  /**\n   * <p>A list of messages to send to the user.</p>\n   */\n  welcomeMessages?: Message[];\n\n  /**\n   * <p>Determines whether Amazon Lex V2 should send audio responses to the client\n   *          application. When this parameter if <code>false</code>, the client\n   *          application needs to create responses for the user.\n   *       </p>\n   */\n  disablePlayback?: boolean;\n\n  /**\n   * <p>A unique identifier that your application assigns to the event. You\n   *          can use this to identify events in logs.</p>\n   */\n  eventId?: string;\n\n  /**\n   * <p>A timestamp set by the client of the date and time that the event\n   *          was sent to Amazon Lex V2.</p>\n   */\n  clientTimestampMillis?: number;\n}\n\nexport namespace ConfigurationEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: ConfigurationEvent): any => ({\n    ...obj,\n    ...(obj.welcomeMessages && {\n      welcomeMessages: obj.welcomeMessages.map((item) => Message.filterSensitiveLog(item)),\n    }),\n  });\n}\n\nexport interface PutSessionRequest {\n  /**\n   * <p>The identifier of the bot that receives the session data.</p>\n   */\n  botId: string | undefined;\n\n  /**\n   * <p>The alias identifier of the bot that receives the session\n   *          data.</p>\n   */\n  botAliasId: string | undefined;\n\n  /**\n   * <p>The locale where the session is in use.</p>\n   */\n  localeId: string | undefined;\n\n  /**\n   * <p>The identifier of the session that receives the session data.</p>\n   */\n  sessionId: string | undefined;\n\n  /**\n   * <p>A list of messages to send to the user. Messages are sent in the\n   *          order that they are defined in the list.</p>\n   */\n  messages?: Message[];\n\n  /**\n   * <p>Sets the state of the session with the user. You can use this to set\n   *          the current intent, attributes, context, and dialog action. Use the\n   *          dialog action to determine the next step that Amazon Lex V2 should use in the\n   *          conversation with the user.</p>\n   */\n  sessionState: SessionState | undefined;\n\n  /**\n   * <p>Request-specific information passed between Amazon Lex V2 and the client\n   *          application.</p>\n   *          <p>The namespace <code>x-amz-lex:</code> is reserved for special\n   *          attributes. Don't create any request attributes with the prefix\n   *             <code>x-amz-lex:</code>.</p>\n   */\n  requestAttributes?: { [key: string]: string };\n\n  /**\n   * <p>The message that Amazon Lex V2 returns in the response can be either text or\n   *          speech depending on the value of this parameter. </p>\n   *          <ul>\n   *             <li>\n   *                <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex V2\n   *                returns text in the response.</p>\n   *             </li>\n   *          </ul>\n   */\n  responseContentType?: string;\n}\n\nexport namespace PutSessionRequest {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: PutSessionRequest): any => ({\n    ...obj,\n    ...(obj.messages && { messages: obj.messages.map((item) => Message.filterSensitiveLog(item)) }),\n  });\n}\n\nexport interface RecognizeTextRequest {\n  /**\n   * <p>The identifier of the bot that processes the request.</p>\n   */\n  botId: string | undefined;\n\n  /**\n   * <p>The alias identifier in use for the bot that processes the\n   *          request.</p>\n   */\n  botAliasId: string | undefined;\n\n  /**\n   * <p>The locale where the session is in use.</p>\n   */\n  localeId: string | undefined;\n\n  /**\n   * <p>The identifier of the user session that is having the\n   *          conversation.</p>\n   */\n  sessionId: string | undefined;\n\n  /**\n   * <p>The text that the user entered. Amazon Lex V2 interprets this text.</p>\n   */\n  text: string | undefined;\n\n  /**\n   * <p>The current state of the dialog between the user and the bot.</p>\n   */\n  sessionState?: SessionState;\n\n  /**\n   * <p>Request-specific information passed between the client application\n   *          and Amazon Lex V2 </p>\n   *          <p>The namespace <code>x-amz-lex:</code> is reserved for special\n   *          attributes. Don't create any request attributes with the prefix\n   *             <code>x-amz-lex:</code>.</p>\n   */\n  requestAttributes?: { [key: string]: string };\n}\n\nexport namespace RecognizeTextRequest {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: RecognizeTextRequest): any => ({\n    ...obj,\n    ...(obj.text && { text: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Represents a stream of events between your application and\n *          Amazon Lex V2.</p>\n */\nexport type StartConversationRequestEventStream =\n  | StartConversationRequestEventStream.AudioInputEventMember\n  | StartConversationRequestEventStream.ConfigurationEventMember\n  | StartConversationRequestEventStream.DTMFInputEventMember\n  | StartConversationRequestEventStream.DisconnectionEventMember\n  | StartConversationRequestEventStream.PlaybackCompletionEventMember\n  | StartConversationRequestEventStream.TextInputEventMember\n  | StartConversationRequestEventStream.$UnknownMember;\n\nexport namespace StartConversationRequestEventStream {\n  /**\n   * <p>Configuration information sent from your client application to\n   *          Amazon Lex V2</p>\n   */\n  export interface ConfigurationEventMember {\n    ConfigurationEvent: ConfigurationEvent;\n    AudioInputEvent?: never;\n    DTMFInputEvent?: never;\n    TextInputEvent?: never;\n    PlaybackCompletionEvent?: never;\n    DisconnectionEvent?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Speech audio sent from your client application to Amazon Lex V2. Audio\n   *          starts accumulating when Amazon Lex V2 identifies a voice and continues until a\n   *          natural pause in the speech is found before processing.</p>\n   */\n  export interface AudioInputEventMember {\n    ConfigurationEvent?: never;\n    AudioInputEvent: AudioInputEvent;\n    DTMFInputEvent?: never;\n    TextInputEvent?: never;\n    PlaybackCompletionEvent?: never;\n    DisconnectionEvent?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>DTMF information sent to Amazon Lex V2 by your application. Amazon Lex V2\n   *          accumulates the DMTF information from when the user sends the first\n   *          character and ends</p>\n   *          <ul>\n   *             <li>\n   *                <p>when there's a pause longer that the value configured for the\n   *                end timeout.</p>\n   *             </li>\n   *             <li>\n   *                <p>when there's a digit that is the configured end\n   *                character.</p>\n   *             </li>\n   *             <li>\n   *                <p>when Amazon Lex V2 accumulates characters equal to the maximum DTMF\n   *                character configuration.</p>\n   *             </li>\n   *          </ul>\n   */\n  export interface DTMFInputEventMember {\n    ConfigurationEvent?: never;\n    AudioInputEvent?: never;\n    DTMFInputEvent: DTMFInputEvent;\n    TextInputEvent?: never;\n    PlaybackCompletionEvent?: never;\n    DisconnectionEvent?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Text sent from your client application to Amazon Lex V2. Each\n   *             <code>TextInputEvent</code> is processed individually.</p>\n   */\n  export interface TextInputEventMember {\n    ConfigurationEvent?: never;\n    AudioInputEvent?: never;\n    DTMFInputEvent?: never;\n    TextInputEvent: TextInputEvent;\n    PlaybackCompletionEvent?: never;\n    DisconnectionEvent?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Event sent from the client application to Amazon Lex V2 to indicate that it\n   *          has finished playing audio and that Amazon Lex V2 should start listening for\n   *          user input.</p>\n   */\n  export interface PlaybackCompletionEventMember {\n    ConfigurationEvent?: never;\n    AudioInputEvent?: never;\n    DTMFInputEvent?: never;\n    TextInputEvent?: never;\n    PlaybackCompletionEvent: PlaybackCompletionEvent;\n    DisconnectionEvent?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Event sent from the client application to indicate to Amazon Lex V2 that the\n   *          conversation is over.</p>\n   */\n  export interface DisconnectionEventMember {\n    ConfigurationEvent?: never;\n    AudioInputEvent?: never;\n    DTMFInputEvent?: never;\n    TextInputEvent?: never;\n    PlaybackCompletionEvent?: never;\n    DisconnectionEvent: DisconnectionEvent;\n    $unknown?: never;\n  }\n\n  export interface $UnknownMember {\n    ConfigurationEvent?: never;\n    AudioInputEvent?: never;\n    DTMFInputEvent?: never;\n    TextInputEvent?: never;\n    PlaybackCompletionEvent?: never;\n    DisconnectionEvent?: never;\n    $unknown: [string, any];\n  }\n\n  export interface Visitor<T> {\n    ConfigurationEvent: (value: ConfigurationEvent) => T;\n    AudioInputEvent: (value: AudioInputEvent) => T;\n    DTMFInputEvent: (value: DTMFInputEvent) => T;\n    TextInputEvent: (value: TextInputEvent) => T;\n    PlaybackCompletionEvent: (value: PlaybackCompletionEvent) => T;\n    DisconnectionEvent: (value: DisconnectionEvent) => T;\n    _: (name: string, value: any) => T;\n  }\n\n  export const visit = <T>(value: StartConversationRequestEventStream, visitor: Visitor<T>): T => {\n    if (value.ConfigurationEvent !== undefined) return visitor.ConfigurationEvent(value.ConfigurationEvent);\n    if (value.AudioInputEvent !== undefined) return visitor.AudioInputEvent(value.AudioInputEvent);\n    if (value.DTMFInputEvent !== undefined) return visitor.DTMFInputEvent(value.DTMFInputEvent);\n    if (value.TextInputEvent !== undefined) return visitor.TextInputEvent(value.TextInputEvent);\n    if (value.PlaybackCompletionEvent !== undefined)\n      return visitor.PlaybackCompletionEvent(value.PlaybackCompletionEvent);\n    if (value.DisconnectionEvent !== undefined) return visitor.DisconnectionEvent(value.DisconnectionEvent);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: StartConversationRequestEventStream): any => {\n    if (obj.ConfigurationEvent !== undefined)\n      return { ConfigurationEvent: ConfigurationEvent.filterSensitiveLog(obj.ConfigurationEvent) };\n    if (obj.AudioInputEvent !== undefined)\n      return { AudioInputEvent: AudioInputEvent.filterSensitiveLog(obj.AudioInputEvent) };\n    if (obj.DTMFInputEvent !== undefined)\n      return { DTMFInputEvent: DTMFInputEvent.filterSensitiveLog(obj.DTMFInputEvent) };\n    if (obj.TextInputEvent !== undefined)\n      return { TextInputEvent: TextInputEvent.filterSensitiveLog(obj.TextInputEvent) };\n    if (obj.PlaybackCompletionEvent !== undefined)\n      return { PlaybackCompletionEvent: PlaybackCompletionEvent.filterSensitiveLog(obj.PlaybackCompletionEvent) };\n    if (obj.DisconnectionEvent !== undefined)\n      return { DisconnectionEvent: DisconnectionEvent.filterSensitiveLog(obj.DisconnectionEvent) };\n    if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: \"UNKNOWN\" };\n  };\n}\n\nexport interface StartConversationRequest {\n  /**\n   * <p>The identifier of the bot to process the request.</p>\n   */\n  botId: string | undefined;\n\n  /**\n   * <p>The alias identifier in use for the bot that processes the\n   *          request.</p>\n   */\n  botAliasId: string | undefined;\n\n  /**\n   * <p>The locale where the session is in use.</p>\n   */\n  localeId: string | undefined;\n\n  /**\n   * <p>The identifier of the user session that is having the\n   *          conversation.</p>\n   */\n  sessionId: string | undefined;\n\n  /**\n   * <p>The conversation type that you are using the Amazon Lex V2. If the\n   *          conversation mode is <code>AUDIO</code> you can send both audio and\n   *          DTMF information. If the mode is <code>TEXT</code> you can only send\n   *          text.</p>\n   */\n  conversationMode?: ConversationMode | string;\n\n  /**\n   * <p>Represents the stream of events to Amazon Lex V2 from your application. The\n   *          events are encoded as HTTP/2 data frames.</p>\n   */\n  requestEventStream: AsyncIterable<StartConversationRequestEventStream> | undefined;\n}\n\nexport namespace StartConversationRequest {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: StartConversationRequest): any => ({\n    ...obj,\n    ...(obj.requestEventStream && { requestEventStream: \"STREAMING_CONTENT\" }),\n  });\n}\n\nexport interface GetSessionResponse {\n  /**\n   * <p>The identifier of the returned session.</p>\n   */\n  sessionId?: string;\n\n  /**\n   * <p>A list of messages that were last sent to the user. The messages are\n   *          ordered based on the order that your returned the messages from your\n   *          Lambda function or the order that messages are defined in the bot.\n   *       </p>\n   */\n  messages?: Message[];\n\n  /**\n   * <p>A list of intents that Amazon Lex V2 determined might satisfy the user's\n   *          utterance. </p>\n   *          <p>Each interpretation includes the intent, a score that indicates how\n   *          confident Amazon Lex V2 is that the interpretation is the correct one, and an\n   *          optional sentiment response that indicates the sentiment expressed in\n   *          the utterance.</p>\n   */\n  interpretations?: Interpretation[];\n\n  /**\n   * <p>Represents the current state of the dialog between the user and the\n   *          bot.</p>\n   *          <p>You can use this to determine the progress of the conversation and\n   *          what the next action might be.</p>\n   */\n  sessionState?: SessionState;\n}\n\nexport namespace GetSessionResponse {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: GetSessionResponse): any => ({\n    ...obj,\n    ...(obj.messages && { messages: obj.messages.map((item) => Message.filterSensitiveLog(item)) }),\n  });\n}\n\n/**\n * <p>Contains the current state of the conversation between the client\n *          application and Amazon Lex V2.</p>\n */\nexport interface IntentResultEvent {\n  /**\n   * <p>Indicates whether the input to the operation was text or\n   *          speech.</p>\n   */\n  inputMode?: InputMode | string;\n\n  /**\n   * <p>A list of intents that Amazon Lex V2 determined might satisfy the user's\n   *          utterance.</p>\n   *\n   *          <p>Each interpretation includes the intent, a score that indicates how\n   *          confident Amazon Lex V2 is that the interpretation is the correct one, and an\n   *          optional sentiment response that indicates the sentiment expressed in\n   *          the utterance.</p>\n   */\n  interpretations?: Interpretation[];\n\n  /**\n   * <p>The state of the user's session with Amazon Lex V2.</p>\n   */\n  sessionState?: SessionState;\n\n  /**\n   * <p>The attributes sent in the request.</p>\n   */\n  requestAttributes?: { [key: string]: string };\n\n  /**\n   * <p>The identifier of the session in use.</p>\n   */\n  sessionId?: string;\n\n  /**\n   * <p>A unique identifier of the event sent by Amazon Lex V2. The identifier is in\n   *          the form <code>RESPONSE-N</code>, where N is a number starting with one\n   *          and incremented for each event sent by Amazon Lex V2 in the current\n   *          session.</p>\n   */\n  eventId?: string;\n}\n\nexport namespace IntentResultEvent {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: IntentResultEvent): any => ({\n    ...obj,\n  });\n}\n\nexport interface RecognizeTextResponse {\n  /**\n   * <p>A list of messages last sent to the user. The messages are ordered\n   *          based on the order that you returned the messages from your Lambda\n   *          function or the order that the messages are defined in the bot.</p>\n   */\n  messages?: Message[];\n\n  /**\n   * <p>Represents the current state of the dialog between the user and the\n   *          bot. </p>\n   *          <p>Use this to determine the progress of the conversation and what the\n   *          next action may be.</p>\n   */\n  sessionState?: SessionState;\n\n  /**\n   * <p>A list of intents that Amazon Lex V2 determined might satisfy the user's\n   *          utterance. </p>\n   *          <p>Each interpretation includes the intent, a score that indicates now\n   *          confident Amazon Lex V2 is that the interpretation is the correct one, and an\n   *          optional sentiment response that indicates the sentiment expressed in\n   *          the utterance.</p>\n   */\n  interpretations?: Interpretation[];\n\n  /**\n   * <p>The attributes sent in the request.</p>\n   */\n  requestAttributes?: { [key: string]: string };\n\n  /**\n   * <p>The identifier of the session in use.</p>\n   */\n  sessionId?: string;\n}\n\nexport namespace RecognizeTextResponse {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: RecognizeTextResponse): any => ({\n    ...obj,\n    ...(obj.messages && { messages: obj.messages.map((item) => Message.filterSensitiveLog(item)) }),\n  });\n}\n\n/**\n * <p>Represents a stream of events between Amazon Lex V2 and your\n *          application.</p>\n */\nexport type StartConversationResponseEventStream =\n  | StartConversationResponseEventStream.AccessDeniedExceptionMember\n  | StartConversationResponseEventStream.AudioResponseEventMember\n  | StartConversationResponseEventStream.BadGatewayExceptionMember\n  | StartConversationResponseEventStream.ConflictExceptionMember\n  | StartConversationResponseEventStream.DependencyFailedExceptionMember\n  | StartConversationResponseEventStream.HeartbeatEventMember\n  | StartConversationResponseEventStream.IntentResultEventMember\n  | StartConversationResponseEventStream.InternalServerExceptionMember\n  | StartConversationResponseEventStream.PlaybackInterruptionEventMember\n  | StartConversationResponseEventStream.ResourceNotFoundExceptionMember\n  | StartConversationResponseEventStream.TextResponseEventMember\n  | StartConversationResponseEventStream.ThrottlingExceptionMember\n  | StartConversationResponseEventStream.TranscriptEventMember\n  | StartConversationResponseEventStream.ValidationExceptionMember\n  | StartConversationResponseEventStream.$UnknownMember;\n\nexport namespace StartConversationResponseEventStream {\n  /**\n   * <p>Event sent from Amazon Lex V2 to indicate to the client application should\n   *          stop playback of audio. For example, if the client is playing a prompt\n   *          that asks for the user's telephone number, the user might start to say\n   *          the phone number before the prompt is complete. Amazon Lex V2 sends this event\n   *          to the client application to indicate that the user is responding and\n   *          that Amazon Lex V2 is processing their input.</p>\n   */\n  export interface PlaybackInterruptionEventMember {\n    PlaybackInterruptionEvent: PlaybackInterruptionEvent;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Event sent from Amazon Lex V2 to your client application that contains a\n   *          transcript of voice audio. </p>\n   */\n  export interface TranscriptEventMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent: TranscriptEvent;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Event sent from Amazon Lex V2 to the client application containing the\n   *          current state of the conversation between the user and Amazon Lex V2.</p>\n   */\n  export interface IntentResultEventMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent: IntentResultEvent;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The event sent from Amazon Lex V2 to your application with text to present\n   *          to the user.</p>\n   */\n  export interface TextResponseEventMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent: TextResponseEvent;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>An event sent from Amazon Lex V2 to your client application containing audio\n   *          to play to the user. </p>\n   */\n  export interface AudioResponseEventMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent: AudioResponseEvent;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Event that Amazon Lex V2 sends to indicate that the stream is still open\n   *          between the client application and Amazon Lex V2 </p>\n   */\n  export interface HeartbeatEventMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent: HeartbeatEvent;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Exception thrown when the credentials passed with the request are\n   *          invalid or expired. Also thrown when the credentials in the request do\n   *          not have permission to access the <code>StartConversation</code>\n   *          operation.</p>\n   */\n  export interface AccessDeniedExceptionMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException: AccessDeniedException;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Exception thrown if one of the input parameters points to a resource\n   *          that does not exist. For example, if the bot ID specified does not\n   *          exist.</p>\n   */\n  export interface ResourceNotFoundExceptionMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException: ResourceNotFoundException;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Exception thrown when one or more parameters could not be validated.\n   *          The <code>message</code> contains the name of the field that isn't\n   *          valid.</p>\n   */\n  export interface ValidationExceptionMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException: ValidationException;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Exception thrown when your application exceeds the maximum number of\n   *          concurrent requests. </p>\n   */\n  export interface ThrottlingExceptionMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException: ThrottlingException;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>An error occurred with Amazon Lex V2.</p>\n   */\n  export interface InternalServerExceptionMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException: InternalServerException;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>Exception thrown when two clients are using the same AWS account,\n   *          Amazon Lex V2 bot, and session ID.</p>\n   */\n  export interface ConflictExceptionMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException: ConflictException;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p></p>\n   */\n  export interface DependencyFailedExceptionMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException: DependencyFailedException;\n    BadGatewayException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p></p>\n   */\n  export interface BadGatewayExceptionMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException: BadGatewayException;\n    $unknown?: never;\n  }\n\n  export interface $UnknownMember {\n    PlaybackInterruptionEvent?: never;\n    TranscriptEvent?: never;\n    IntentResultEvent?: never;\n    TextResponseEvent?: never;\n    AudioResponseEvent?: never;\n    HeartbeatEvent?: never;\n    AccessDeniedException?: never;\n    ResourceNotFoundException?: never;\n    ValidationException?: never;\n    ThrottlingException?: never;\n    InternalServerException?: never;\n    ConflictException?: never;\n    DependencyFailedException?: never;\n    BadGatewayException?: never;\n    $unknown: [string, any];\n  }\n\n  export interface Visitor<T> {\n    PlaybackInterruptionEvent: (value: PlaybackInterruptionEvent) => T;\n    TranscriptEvent: (value: TranscriptEvent) => T;\n    IntentResultEvent: (value: IntentResultEvent) => T;\n    TextResponseEvent: (value: TextResponseEvent) => T;\n    AudioResponseEvent: (value: AudioResponseEvent) => T;\n    HeartbeatEvent: (value: HeartbeatEvent) => T;\n    AccessDeniedException: (value: AccessDeniedException) => T;\n    ResourceNotFoundException: (value: ResourceNotFoundException) => T;\n    ValidationException: (value: ValidationException) => T;\n    ThrottlingException: (value: ThrottlingException) => T;\n    InternalServerException: (value: InternalServerException) => T;\n    ConflictException: (value: ConflictException) => T;\n    DependencyFailedException: (value: DependencyFailedException) => T;\n    BadGatewayException: (value: BadGatewayException) => T;\n    _: (name: string, value: any) => T;\n  }\n\n  export const visit = <T>(value: StartConversationResponseEventStream, visitor: Visitor<T>): T => {\n    if (value.PlaybackInterruptionEvent !== undefined)\n      return visitor.PlaybackInterruptionEvent(value.PlaybackInterruptionEvent);\n    if (value.TranscriptEvent !== undefined) return visitor.TranscriptEvent(value.TranscriptEvent);\n    if (value.IntentResultEvent !== undefined) return visitor.IntentResultEvent(value.IntentResultEvent);\n    if (value.TextResponseEvent !== undefined) return visitor.TextResponseEvent(value.TextResponseEvent);\n    if (value.AudioResponseEvent !== undefined) return visitor.AudioResponseEvent(value.AudioResponseEvent);\n    if (value.HeartbeatEvent !== undefined) return visitor.HeartbeatEvent(value.HeartbeatEvent);\n    if (value.AccessDeniedException !== undefined) return visitor.AccessDeniedException(value.AccessDeniedException);\n    if (value.ResourceNotFoundException !== undefined)\n      return visitor.ResourceNotFoundException(value.ResourceNotFoundException);\n    if (value.ValidationException !== undefined) return visitor.ValidationException(value.ValidationException);\n    if (value.ThrottlingException !== undefined) return visitor.ThrottlingException(value.ThrottlingException);\n    if (value.InternalServerException !== undefined)\n      return visitor.InternalServerException(value.InternalServerException);\n    if (value.ConflictException !== undefined) return visitor.ConflictException(value.ConflictException);\n    if (value.DependencyFailedException !== undefined)\n      return visitor.DependencyFailedException(value.DependencyFailedException);\n    if (value.BadGatewayException !== undefined) return visitor.BadGatewayException(value.BadGatewayException);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: StartConversationResponseEventStream): any => {\n    if (obj.PlaybackInterruptionEvent !== undefined)\n      return { PlaybackInterruptionEvent: PlaybackInterruptionEvent.filterSensitiveLog(obj.PlaybackInterruptionEvent) };\n    if (obj.TranscriptEvent !== undefined)\n      return { TranscriptEvent: TranscriptEvent.filterSensitiveLog(obj.TranscriptEvent) };\n    if (obj.IntentResultEvent !== undefined)\n      return { IntentResultEvent: IntentResultEvent.filterSensitiveLog(obj.IntentResultEvent) };\n    if (obj.TextResponseEvent !== undefined)\n      return { TextResponseEvent: TextResponseEvent.filterSensitiveLog(obj.TextResponseEvent) };\n    if (obj.AudioResponseEvent !== undefined)\n      return { AudioResponseEvent: AudioResponseEvent.filterSensitiveLog(obj.AudioResponseEvent) };\n    if (obj.HeartbeatEvent !== undefined)\n      return { HeartbeatEvent: HeartbeatEvent.filterSensitiveLog(obj.HeartbeatEvent) };\n    if (obj.AccessDeniedException !== undefined)\n      return { AccessDeniedException: AccessDeniedException.filterSensitiveLog(obj.AccessDeniedException) };\n    if (obj.ResourceNotFoundException !== undefined)\n      return { ResourceNotFoundException: ResourceNotFoundException.filterSensitiveLog(obj.ResourceNotFoundException) };\n    if (obj.ValidationException !== undefined)\n      return { ValidationException: ValidationException.filterSensitiveLog(obj.ValidationException) };\n    if (obj.ThrottlingException !== undefined)\n      return { ThrottlingException: ThrottlingException.filterSensitiveLog(obj.ThrottlingException) };\n    if (obj.InternalServerException !== undefined)\n      return { InternalServerException: InternalServerException.filterSensitiveLog(obj.InternalServerException) };\n    if (obj.ConflictException !== undefined)\n      return { ConflictException: ConflictException.filterSensitiveLog(obj.ConflictException) };\n    if (obj.DependencyFailedException !== undefined)\n      return { DependencyFailedException: DependencyFailedException.filterSensitiveLog(obj.DependencyFailedException) };\n    if (obj.BadGatewayException !== undefined)\n      return { BadGatewayException: BadGatewayException.filterSensitiveLog(obj.BadGatewayException) };\n    if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: \"UNKNOWN\" };\n  };\n}\n\nexport interface StartConversationResponse {\n  /**\n   * <p>Represents the stream of events from Amazon Lex V2 to your application. The\n   *          events are encoded as HTTP/2 data frames.</p>\n   */\n  responseEventStream?: AsyncIterable<StartConversationResponseEventStream>;\n}\n\nexport namespace StartConversationResponse {\n  /**\n   * @internal\n   */\n  export const filterSensitiveLog = (obj: StartConversationResponse): any => ({\n    ...obj,\n    ...(obj.responseEventStream && { responseEventStream: \"STREAMING_CONTENT\" }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}