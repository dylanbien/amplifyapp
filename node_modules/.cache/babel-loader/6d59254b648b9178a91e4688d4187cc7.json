{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nexport var getRegionInfo = function (region, _a) {\n  var _b, _c, _d, _e;\n\n  var signingService = _a.signingService,\n      regionHash = _a.regionHash,\n      partitionHash = _a.partitionHash;\n  var partition = getResolvedPartition(region, {\n    partitionHash: partitionHash\n  });\n  var resolvedRegion = (_c = (_b = partitionHash[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;\n  return __assign(__assign({\n    partition: partition,\n    signingService: signingService,\n    hostname: getResolvedHostname(resolvedRegion, {\n      signingService: signingService,\n      regionHash: regionHash,\n      partitionHash: partitionHash\n    })\n  }, ((_d = regionHash[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.signingRegion) && {\n    signingRegion: regionHash[resolvedRegion].signingRegion\n  }), ((_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingService) && {\n    signingService: regionHash[resolvedRegion].signingService\n  });\n};","map":{"version":3,"mappings":";AAEA,SAASA,mBAAT,QAA4E,uBAA5E;AACA,SAASC,oBAAT,QAAoD,wBAApD;AAMA,OAAO,IAAMC,aAAa,GAAG,UAC3BC,MAD2B,EAE3BC,EAF2B,EAEwC;;;MAAjEC,cAAc;MAAEC,UAAU;MAAEC,aAAa;EAE3C,IAAMC,SAAS,GAAGP,oBAAoB,CAACE,MAAD,EAAS;IAAEI,aAAa;EAAf,CAAT,CAAtC;EACA,IAAME,cAAc,GAAG,yBAAa,CAACD,SAAD,CAAb,MAAwB,IAAxB,IAAwBE,aAAxB,GAAwB,MAAxB,GAAwBA,GAAEC,QAA1B,MAAkC,IAAlC,IAAkCC,aAAlC,GAAkCA,EAAlC,GAAsCT,MAA7D;EACA;IACEK,SAAS,WADX;IAEEH,cAAc,gBAFhB;IAGEQ,QAAQ,EAAEb,mBAAmB,CAACS,cAAD,EAAiB;MAAEJ,cAAc,gBAAhB;MAAkBC,UAAU,YAA5B;MAA8BC,aAAa;IAA3C,CAAjB;EAH/B,GAIM,iBAAU,CAACE,cAAD,CAAV,MAA0B,IAA1B,IAA0BK,aAA1B,GAA0B,MAA1B,GAA0BA,GAAEC,aAA5B,KAA6C;IAC/CA,aAAa,EAAET,UAAU,CAACG,cAAD,CAAV,CAA2BM;EADK,CAJnD,GAOM,iBAAU,CAACN,cAAD,CAAV,MAA0B,IAA1B,IAA0BO,aAA1B,GAA0B,MAA1B,GAA0BA,GAAEX,cAA5B,KAA8C;IAChDA,cAAc,EAAEC,UAAU,CAACG,cAAD,CAAV,CAA2BJ;EADK,CAPpD;AAWD,CAjBM","names":["getResolvedHostname","getResolvedPartition","getRegionInfo","region","_a","signingService","regionHash","partitionHash","partition","resolvedRegion","_b","endpoint","_c","hostname","_d","signingRegion","_e"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/config-resolver/src/regionInfo/getRegionInfo.ts"],"sourcesContent":["import { RegionInfo } from \"@aws-sdk/types\";\n\nimport { getResolvedHostname, GetResolvedHostnameOptions, RegionHash } from \"./getResolvedHostname\";\nimport { getResolvedPartition, PartitionHash } from \"./getResolvedPartition\";\n\nexport { RegionHash, PartitionHash };\n\nexport interface GetRegionInfoOptions extends GetResolvedHostnameOptions {}\n\nexport const getRegionInfo = (\n  region: string,\n  { signingService, regionHash, partitionHash }: GetRegionInfoOptions\n): RegionInfo => {\n  const partition = getResolvedPartition(region, { partitionHash });\n  const resolvedRegion = partitionHash[partition]?.endpoint ?? region;\n  return {\n    partition,\n    signingService,\n    hostname: getResolvedHostname(resolvedRegion, { signingService, regionHash, partitionHash }),\n    ...(regionHash[resolvedRegion]?.signingRegion && {\n      signingRegion: regionHash[resolvedRegion].signingRegion,\n    }),\n    ...(regionHash[resolvedRegion]?.signingService && {\n      signingService: regionHash[resolvedRegion].signingService,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}