{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { v4 } from \"uuid\";\nimport { DEFAULT_MAX_ATTEMPTS, RETRY_MODES } from \"./config\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, INVOCATION_ID_HEADER, REQUEST_HEADER, THROTTLING_RETRY_DELAY_BASE } from \"./constants\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\n\nvar StandardRetryStrategy =\n/** @class */\nfunction () {\n  function StandardRetryStrategy(maxAttemptsProvider, options) {\n    var _a, _b, _c;\n\n    this.maxAttemptsProvider = maxAttemptsProvider;\n    this.mode = RETRY_MODES.STANDARD;\n    this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;\n    this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;\n    this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n  }\n\n  StandardRetryStrategy.prototype.shouldRetry = function (error, attempts, maxAttempts) {\n    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n  };\n\n  StandardRetryStrategy.prototype.getMaxAttempts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var maxAttempts, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.maxAttemptsProvider()];\n\n          case 1:\n            maxAttempts = _a.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            maxAttempts = DEFAULT_MAX_ATTEMPTS;\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            , maxAttempts];\n        }\n      });\n    });\n  };\n\n  StandardRetryStrategy.prototype.retry = function (next, args, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            attempts = 0;\n            totalDelay = 0;\n            return [4\n            /*yield*/\n            , this.getMaxAttempts()];\n\n          case 1:\n            maxAttempts = _a.sent();\n            request = args.request;\n\n            if (HttpRequest.isInstance(request)) {\n              request.headers[INVOCATION_ID_HEADER] = v4();\n            }\n\n            _loop_1 = function () {\n              var _b, response, output, e_1, err, delay_1;\n\n              return __generator(this, function (_c) {\n                switch (_c.label) {\n                  case 0:\n                    _c.trys.push([0, 4,, 7]);\n\n                    if (HttpRequest.isInstance(request)) {\n                      request.headers[REQUEST_HEADER] = \"attempt=\" + (attempts + 1) + \"; max=\" + maxAttempts;\n                    }\n\n                    if (!(options === null || options === void 0 ? void 0 : options.beforeRequest)) return [3\n                    /*break*/\n                    , 2];\n                    return [4\n                    /*yield*/\n                    , options.beforeRequest()];\n\n                  case 1:\n                    _c.sent();\n\n                    _c.label = 2;\n\n                  case 2:\n                    return [4\n                    /*yield*/\n                    , next(args)];\n\n                  case 3:\n                    _b = _c.sent(), response = _b.response, output = _b.output;\n\n                    if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                      options.afterRequest(response);\n                    }\n\n                    this_1.retryQuota.releaseRetryTokens(retryTokenAmount);\n                    output.$metadata.attempts = attempts + 1;\n                    output.$metadata.totalRetryDelay = totalDelay;\n                    return [2\n                    /*return*/\n                    , {\n                      value: {\n                        response: response,\n                        output: output\n                      }\n                    }];\n\n                  case 4:\n                    e_1 = _c.sent();\n                    err = asSdkError(e_1);\n                    attempts++;\n                    if (!this_1.shouldRetry(err, attempts, maxAttempts)) return [3\n                    /*break*/\n                    , 6];\n                    retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err);\n                    delay_1 = this_1.delayDecider(isThrottlingError(err) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);\n                    totalDelay += delay_1;\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      return setTimeout(resolve, delay_1);\n                    })];\n\n                  case 5:\n                    _c.sent();\n\n                    return [2\n                    /*return*/\n                    , \"continue\"];\n\n                  case 6:\n                    if (!err.$metadata) {\n                      err.$metadata = {};\n                    }\n\n                    err.$metadata.attempts = attempts;\n                    err.$metadata.totalRetryDelay = totalDelay;\n                    throw err;\n\n                  case 7:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _a.label = 2;\n\n          case 2:\n            if (!true) return [3\n            /*break*/\n            , 4];\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 3:\n            state_1 = _a.sent();\n            if (typeof state_1 === \"object\") return [2\n            /*return*/\n            , state_1.value];\n            return [3\n            /*break*/\n            , 2];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return StandardRetryStrategy;\n}();\n\nexport { StandardRetryStrategy };\n\nvar asSdkError = function (error) {\n  if (error instanceof Error) return error;\n  if (error instanceof Object) return Object.assign(new Error(), error);\n  if (typeof error === \"string\") return new Error(error);\n  return new Error(\"AWS SDK error wrapper for \" + error);\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","isThrottlingError","v4","DEFAULT_MAX_ATTEMPTS","RETRY_MODES","DEFAULT_RETRY_DELAY_BASE","INITIAL_RETRY_TOKENS","INVOCATION_ID_HEADER","REQUEST_HEADER","THROTTLING_RETRY_DELAY_BASE","getDefaultRetryQuota","defaultDelayDecider","defaultRetryDecider","maxAttemptsProvider","options","STANDARD","retryDecider","_a","delayDecider","_b","retryQuota","_c","StandardRetryStrategy","error","attempts","maxAttempts","hasRetryTokens","next","args","totalDelay","getMaxAttempts","request","isInstance","headers","beforeRequest","response","output","afterRequest","this_1","releaseRetryTokens","retryTokenAmount","$metadata","totalRetryDelay","err","asSdkError","e_1","shouldRetry","retrieveRetryTokens","delay_1","Promise","resolve","Error","Object","assign"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/middleware-retry/src/StandardRetryStrategy.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { SdkError } from \"@aws-sdk/types\";\nimport { FinalizeHandler, FinalizeHandlerArguments, MetadataBearer, Provider, RetryStrategy } from \"@aws-sdk/types\";\nimport { v4 } from \"uuid\";\n\nimport { DEFAULT_MAX_ATTEMPTS, RETRY_MODES } from \"./config\";\nimport {\n  DEFAULT_RETRY_DELAY_BASE,\n  INITIAL_RETRY_TOKENS,\n  INVOCATION_ID_HEADER,\n  REQUEST_HEADER,\n  THROTTLING_RETRY_DELAY_BASE,\n} from \"./constants\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\nimport { DelayDecider, RetryDecider, RetryQuota } from \"./types\";\n\n/**\n * Strategy options to be passed to StandardRetryStrategy\n */\nexport interface StandardRetryStrategyOptions {\n  retryDecider?: RetryDecider;\n  delayDecider?: DelayDecider;\n  retryQuota?: RetryQuota;\n}\n\nexport class StandardRetryStrategy implements RetryStrategy {\n  private retryDecider: RetryDecider;\n  private delayDecider: DelayDecider;\n  private retryQuota: RetryQuota;\n  public mode: string = RETRY_MODES.STANDARD;\n\n  constructor(private readonly maxAttemptsProvider: Provider<number>, options?: StandardRetryStrategyOptions) {\n    this.retryDecider = options?.retryDecider ?? defaultRetryDecider;\n    this.delayDecider = options?.delayDecider ?? defaultDelayDecider;\n    this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n  }\n\n  private shouldRetry(error: SdkError, attempts: number, maxAttempts: number) {\n    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n  }\n\n  private async getMaxAttempts() {\n    let maxAttempts: number;\n    try {\n      maxAttempts = await this.maxAttemptsProvider();\n    } catch (error) {\n      maxAttempts = DEFAULT_MAX_ATTEMPTS;\n    }\n    return maxAttempts;\n  }\n\n  async retry<Input extends object, Ouput extends MetadataBearer>(\n    next: FinalizeHandler<Input, Ouput>,\n    args: FinalizeHandlerArguments<Input>,\n    options?: {\n      beforeRequest: Function;\n      afterRequest: Function;\n    }\n  ) {\n    let retryTokenAmount;\n    let attempts = 0;\n    let totalDelay = 0;\n\n    const maxAttempts = await this.getMaxAttempts();\n\n    const { request } = args;\n    if (HttpRequest.isInstance(request)) {\n      request.headers[INVOCATION_ID_HEADER] = v4();\n    }\n\n    while (true) {\n      try {\n        if (HttpRequest.isInstance(request)) {\n          request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n        }\n\n        if (options?.beforeRequest) {\n          await options.beforeRequest();\n        }\n        const { response, output } = await next(args);\n        if (options?.afterRequest) {\n          options.afterRequest(response);\n        }\n\n        this.retryQuota.releaseRetryTokens(retryTokenAmount);\n        output.$metadata.attempts = attempts + 1;\n        output.$metadata.totalRetryDelay = totalDelay;\n\n        return { response, output };\n      } catch (e) {\n        const err = asSdkError(e);\n        attempts++;\n        if (this.shouldRetry(err as SdkError, attempts, maxAttempts)) {\n          retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n          const delay = this.delayDecider(\n            isThrottlingError(err) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE,\n            attempts\n          );\n          totalDelay += delay;\n\n          await new Promise((resolve) => setTimeout(resolve, delay));\n          continue;\n        }\n\n        if (!err.$metadata) {\n          err.$metadata = {};\n        }\n\n        err.$metadata.attempts = attempts;\n        err.$metadata.totalRetryDelay = totalDelay;\n        throw err;\n      }\n    }\n  }\n}\n\nconst asSdkError = (error: unknown): SdkError => {\n  if (error instanceof Error) return error;\n  if (error instanceof Object) return Object.assign(new Error(), error);\n  if (typeof error === \"string\") return new Error(error);\n  return new Error(`AWS SDK error wrapper for ${error}`);\n};\n"]},"metadata":{},"sourceType":"module"}