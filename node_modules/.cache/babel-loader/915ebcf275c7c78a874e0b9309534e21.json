{"ast":null,"code":"export var getResolvedPartition = function (region, _a) {\n  var _b;\n\n  var partitionHash = _a.partitionHash;\n  return (_b = Object.keys(partitionHash || {}).find(function (key) {\n    return partitionHash[key].regions.includes(region);\n  })) !== null && _b !== void 0 ? _b : \"aws\";\n};","map":{"version":3,"mappings":"AAWA,OAAO,IAAMA,oBAAoB,GAAG,UAACC,MAAD,EAAiBC,EAAjB,EAA+D;;;MAA5CC,aAAa;EAClE,mBAAM,CAACC,IAAP,CAAYD,aAAa,IAAI,EAA7B,EAAiCE,IAAjC,CAAsC,UAACC,GAAD,EAAI;IAAK,oBAAa,CAACA,GAAD,CAAb,CAAmBC,OAAnB,CAA2BC,QAA3B,CAAoCP,MAApC;EAA2C,CAA1F,OAA2F,IAA3F,IAA2FQ,aAA3F,GAA2FA,EAA3F,GAA+F,KAA/F;AAAoG,CAD/F","names":["getResolvedPartition","region","_a","partitionHash","keys","find","key","regions","includes","_b"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/config-resolver/src/regionInfo/getResolvedPartition.ts"],"sourcesContent":["export type PartitionHash = { [key: string]: { regions: string[]; hostname?: string; endpoint?: string } };\n\nexport interface GetResolvedPartitionOptions {\n  /**\n   * The hash of partition with the information specific to that partition.\n   * The information includes the list of regions belonging to that partition,\n   * and the hostname to be used for the partition.\n   */\n  partitionHash: PartitionHash;\n}\n\nexport const getResolvedPartition = (region: string, { partitionHash }: GetResolvedPartitionOptions) =>\n  Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? \"aws\";\n"]},"metadata":{},"sourceType":"module"}