{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartConversationRequest, StartConversationResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1StartConversationCommand, serializeAws_restJson1StartConversationCommand } from \"../protocols/Aws_restJson1\";\nimport { getEventStreamPlugin } from \"@aws-sdk/middleware-eventstream\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts an HTTP/2 bidirectional event stream that enables you to send\n *          audio, text, or DTMF input in real time. After your application starts\n *          a conversation, users send input to Amazon Lex V2 as a stream of events. Amazon Lex V2\n *          processes the incoming events and responds with streaming text or audio\n *          events.\n *       </p>\n *          <p>Audio input must be in the following format: <code>audio/lpcm\n *             sample-rate=8000 sample-size-bits=16 channel-count=1;\n *             is-big-endian=false</code>.</p>\n *          <p>The <code>StartConversation</code> operation is supported only in\n *          the following SDKs: </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForCpp/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for C++</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForJavaV2/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for Java V2</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForRubyV3/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for Ruby V3</a>\n *                </p>\n *             </li>\n *          </ul>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LexRuntimeV2Client, StartConversationCommand } from \"@aws-sdk/client-lex-runtime-v2\"; // ES Modules import\n * // const { LexRuntimeV2Client, StartConversationCommand } = require(\"@aws-sdk/client-lex-runtime-v2\"); // CommonJS import\n * const client = new LexRuntimeV2Client(config);\n * const command = new StartConversationCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link StartConversationCommandInput} for command's `input` shape.\n * @see {@link StartConversationCommandOutput} for command's `response` shape.\n * @see {@link LexRuntimeV2ClientResolvedConfig | config} for command's `input` shape.\n *\n */\n\nvar StartConversationCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartConversationCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartConversationCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartConversationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getEventStreamPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"LexRuntimeV2Client\";\n    var commandName = \"StartConversationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartConversationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartConversationResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartConversationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1StartConversationCommand(input, context);\n  };\n\n  StartConversationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1StartConversationCommand(output, context);\n  };\n\n  return StartConversationCommand;\n}($Command);\n\nexport { StartConversationCommand };","map":{"version":3,"mappings":";AACA,SAASA,wBAAT,EAAmCC,yBAAnC,QAAoE,oBAApE;AACA,SACEC,gDADF,EAEEC,8CAFF,QAGO,4BAHP;AAIA,SAASC,oBAAT,QAAqC,iCAArC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AAAA;AAAA;EAA8CC,4CAA9C,CAKE;EACA;;;EAEA,kCAAqBC,KAArB,EAAyD;IAAzD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAoC,CAGvD;EACD;EAED;;;;;EAGAC,iEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBb,oBAAoB,CAACU,aAAD,CAA7C;IAEA,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,oBAAnB;IACA,IAAMC,WAAW,GAAG,0BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAE1B,wBAAwB,CAAC2B,kBAJK;MAKvDC,wBAAwB,EAAE3B,yBAAyB,CAAC0B;IALG,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CA1BD;;EA4BQZ,+CAAR,UACEH,KADF,EAEEuB,OAFF,EAEqD;IAEnD,OAAO7B,8CAA8C,CAACM,KAAD,EAAQuB,OAAR,CAArD;EACD,CALO;;EAOApB,iDAAR,UACEqB,MADF,EAEED,OAFF,EAEqD;IAEnD,OAAO9B,gDAAgD,CAAC+B,MAAD,EAASD,OAAT,CAAvD;EACD,CALO;;EASV;AAAC,CA7DD,CAA8CzB,QAA9C","names":["StartConversationRequest","StartConversationResponse","deserializeAws_restJson1StartConversationCommand","serializeAws_restJson1StartConversationCommand","getEventStreamPlugin","getSerdePlugin","Command","$Command","__extends","input","_super","_this","StartConversationCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/commands/StartConversationCommand.ts"],"sourcesContent":["import { LexRuntimeV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../LexRuntimeV2Client\";\nimport { StartConversationRequest, StartConversationResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1StartConversationCommand,\n  serializeAws_restJson1StartConversationCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getEventStreamPlugin } from \"@aws-sdk/middleware-eventstream\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  EventStreamSerdeContext as __EventStreamSerdeContext,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport interface StartConversationCommandInput extends StartConversationRequest {}\nexport interface StartConversationCommandOutput extends StartConversationResponse, __MetadataBearer {}\n\n/**\n * <p>Starts an HTTP/2 bidirectional event stream that enables you to send\n *          audio, text, or DTMF input in real time. After your application starts\n *          a conversation, users send input to Amazon Lex V2 as a stream of events. Amazon Lex V2\n *          processes the incoming events and responds with streaming text or audio\n *          events.\n *       </p>\n *          <p>Audio input must be in the following format: <code>audio/lpcm\n *             sample-rate=8000 sample-size-bits=16 channel-count=1;\n *             is-big-endian=false</code>.</p>\n *          <p>The <code>StartConversation</code> operation is supported only in\n *          the following SDKs: </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForCpp/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for C++</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForJavaV2/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for Java V2</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForRubyV3/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for Ruby V3</a>\n *                </p>\n *             </li>\n *          </ul>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LexRuntimeV2Client, StartConversationCommand } from \"@aws-sdk/client-lex-runtime-v2\"; // ES Modules import\n * // const { LexRuntimeV2Client, StartConversationCommand } = require(\"@aws-sdk/client-lex-runtime-v2\"); // CommonJS import\n * const client = new LexRuntimeV2Client(config);\n * const command = new StartConversationCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link StartConversationCommandInput} for command's `input` shape.\n * @see {@link StartConversationCommandOutput} for command's `response` shape.\n * @see {@link LexRuntimeV2ClientResolvedConfig | config} for command's `input` shape.\n *\n */\nexport class StartConversationCommand extends $Command<\n  StartConversationCommandInput,\n  StartConversationCommandOutput,\n  LexRuntimeV2ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StartConversationCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: LexRuntimeV2ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StartConversationCommandInput, StartConversationCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getEventStreamPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"LexRuntimeV2Client\";\n    const commandName = \"StartConversationCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartConversationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartConversationResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(\n    input: StartConversationCommandInput,\n    context: __SerdeContext & __EventStreamSerdeContext\n  ): Promise<__HttpRequest> {\n    return serializeAws_restJson1StartConversationCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext & __EventStreamSerdeContext\n  ): Promise<StartConversationCommandOutput> {\n    return deserializeAws_restJson1StartConversationCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}