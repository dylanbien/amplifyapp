{"ast":null,"code":"import { __awaiter, __extends, __generator, __rest } from \"tslib\";\nimport { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\n\nvar AdaptiveRetryStrategy =\n/** @class */\nfunction (_super) {\n  __extends(AdaptiveRetryStrategy, _super);\n\n  function AdaptiveRetryStrategy(maxAttemptsProvider, options) {\n    var _this = this;\n\n    var _a = options !== null && options !== void 0 ? options : {},\n        rateLimiter = _a.rateLimiter,\n        superOptions = __rest(_a, [\"rateLimiter\"]);\n\n    _this = _super.call(this, maxAttemptsProvider, superOptions) || this;\n    _this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter();\n    _this.mode = RETRY_MODES.ADAPTIVE;\n    return _this;\n  }\n\n  AdaptiveRetryStrategy.prototype.retry = function (next, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , _super.prototype.retry.call(this, next, args, {\n          beforeRequest: function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/\n                , this.rateLimiter.getSendToken()];\n              });\n            });\n          },\n          afterRequest: function (response) {\n            _this.rateLimiter.updateClientSendingRate(response);\n          }\n        })];\n      });\n    });\n  };\n\n  return AdaptiveRetryStrategy;\n}(StandardRetryStrategy);\n\nexport { AdaptiveRetryStrategy };","map":{"version":3,"mappings":";AAEA,SAASA,WAAT,QAA4B,UAA5B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,qBAAT,QAAoE,yBAApE;;AAUA;AAAA;AAAA;EAA2CC;;EAGzC,+BAAYC,mBAAZ,EAAmDC,OAAnD,EAAyF;IAAzF;;IACE,IAAMC,KAAmCD,OAAO,SAAP,WAAO,WAAP,aAAW,EAApD;IAAA,IAAQE,WAAW,iBAAnB;IAAA,IAAwBC,YAAY,cAA9B,eAA8B,CAApC;;IACAC,0BAAML,mBAAN,EAA2BI,YAA3B,KAAwC,IAAxC;IACAC,KAAI,CAACF,WAAL,GAAmBA,WAAW,SAAX,eAAW,WAAX,iBAAe,IAAIN,kBAAJ,EAAlC;IACAQ,KAAI,CAACC,IAAL,GAAYV,WAAW,CAACW,QAAxB;;EACD;;EAEKC,wCAAN,UACEC,IADF,EAEEC,IAFF,EAEuC;;;;;QAErC;QAAA;QAAA,EAAOC,iBAAMC,KAAN,CAAWC,IAAX,CAAW,IAAX,EAAYJ,IAAZ,EAAkBC,IAAlB,EAAwB;UAC7BI,aAAa,EAAE;YAAA;;gBACb;gBAAA;gBAAA,EAAO,KAAKX,WAAL,CAAiBY,YAAjB,EAAP;;aADa;UAEd,CAH4B;UAI7BC,YAAY,EAAE,UAACC,QAAD,EAAc;YAC1BZ,KAAI,CAACF,WAAL,CAAiBe,uBAAjB,CAAyCD,QAAzC;UACD;QAN4B,CAAxB,CAAP;;;EAQD,CAZK;;EAaR;AAAC,CAvBD,CAA2CnB,qBAA3C","names":["RETRY_MODES","DefaultRateLimiter","StandardRetryStrategy","__extends","maxAttemptsProvider","options","_a","rateLimiter","superOptions","_this","mode","ADAPTIVE","AdaptiveRetryStrategy","next","args","_super","retry","call","beforeRequest","getSendToken","afterRequest","response","updateClientSendingRate"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/middleware-retry/src/AdaptiveRetryStrategy.ts"],"sourcesContent":["import { FinalizeHandler, FinalizeHandlerArguments, MetadataBearer, Provider } from \"@aws-sdk/types\";\n\nimport { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy, StandardRetryStrategyOptions } from \"./StandardRetryStrategy\";\nimport { RateLimiter } from \"./types\";\n\n/**\n * Strategy options to be passed to AdaptiveRetryStrategy\n */\nexport interface AdaptiveRetryStrategyOptions extends StandardRetryStrategyOptions {\n  rateLimiter?: RateLimiter;\n}\n\nexport class AdaptiveRetryStrategy extends StandardRetryStrategy {\n  private rateLimiter: RateLimiter;\n\n  constructor(maxAttemptsProvider: Provider<number>, options?: AdaptiveRetryStrategyOptions) {\n    const { rateLimiter, ...superOptions } = options ?? {};\n    super(maxAttemptsProvider, superOptions);\n    this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n    this.mode = RETRY_MODES.ADAPTIVE;\n  }\n\n  async retry<Input extends object, Ouput extends MetadataBearer>(\n    next: FinalizeHandler<Input, Ouput>,\n    args: FinalizeHandlerArguments<Input>\n  ) {\n    return super.retry(next, args, {\n      beforeRequest: async () => {\n        return this.rateLimiter.getSendToken();\n      },\n      afterRequest: (response: any) => {\n        this.rateLimiter.updateClientSendingRate(response);\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}