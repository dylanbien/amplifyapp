{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RecognizeUtteranceRequest, RecognizeUtteranceResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1RecognizeUtteranceCommand, serializeAws_restJson1RecognizeUtteranceCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sends user input to Amazon Lex V2. You can send text or speech. Clients use\n *          this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2\n *          interprets the user input using the machine learning model built for\n *          the bot.</p>\n *          <p>The following request fields must be compressed with gzip and then\n *          base64 encoded before you send them to Amazon Lex V2. </p>\n *          <ul>\n *             <li>\n *                <p>requestAttributes</p>\n *             </li>\n *             <li>\n *                <p>sessionState</p>\n *             </li>\n *          </ul>\n *          <p>The following response fields are compressed using gzip and then\n *          base64 encoded by Amazon Lex V2. Before you can use these fields, you must\n *          decode and decompress them. </p>\n *          <ul>\n *             <li>\n *                <p>inputTranscript</p>\n *             </li>\n *             <li>\n *                <p>interpretations</p>\n *             </li>\n *             <li>\n *                <p>messages</p>\n *             </li>\n *             <li>\n *                <p>requestAttributes</p>\n *             </li>\n *             <li>\n *                <p>sessionState</p>\n *             </li>\n *          </ul>\n *          <p>The example contains a Java application that compresses and encodes\n *          a Java object to send to Amazon Lex V2, and a second that decodes and\n *          decompresses a response from Amazon Lex V2.</p>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LexRuntimeV2Client, RecognizeUtteranceCommand } from \"@aws-sdk/client-lex-runtime-v2\"; // ES Modules import\n * // const { LexRuntimeV2Client, RecognizeUtteranceCommand } = require(\"@aws-sdk/client-lex-runtime-v2\"); // CommonJS import\n * const client = new LexRuntimeV2Client(config);\n * const command = new RecognizeUtteranceCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link RecognizeUtteranceCommandInput} for command's `input` shape.\n * @see {@link RecognizeUtteranceCommandOutput} for command's `response` shape.\n * @see {@link LexRuntimeV2ClientResolvedConfig | config} for command's `input` shape.\n *\n */\n\nvar RecognizeUtteranceCommand =\n/** @class */\nfunction (_super) {\n  __extends(RecognizeUtteranceCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function RecognizeUtteranceCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  RecognizeUtteranceCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"LexRuntimeV2Client\";\n    var commandName = \"RecognizeUtteranceCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: RecognizeUtteranceRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: RecognizeUtteranceResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  RecognizeUtteranceCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1RecognizeUtteranceCommand(input, context);\n  };\n\n  RecognizeUtteranceCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1RecognizeUtteranceCommand(output, context);\n  };\n\n  return RecognizeUtteranceCommand;\n}($Command);\n\nexport { RecognizeUtteranceCommand };","map":{"version":3,"mappings":";AACA,SAASA,yBAAT,EAAoCC,0BAApC,QAAsE,oBAAtE;AACA,SACEC,iDADF,EAEEC,+CAFF,QAGO,4BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AAAA;AAAA;EAA+CC,6CAA/C,CAKE;EACA;;;EAEA,mCAAqBC,KAArB,EAA0D;IAA1D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAqC,CAGxD;EACD;EAED;;;;;EAGAC,kEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,oBAAnB;IACA,IAAMC,WAAW,GAAG,2BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,yBAAyB,CAAC0B,kBAJI;MAKvDC,wBAAwB,EAAE1B,0BAA0B,CAACyB;IALE,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,gDAAR,UAAkBH,KAAlB,EAAyDuB,OAAzD,EAAgF;IAC9E,OAAO5B,+CAA+C,CAACK,KAAD,EAAQuB,OAAR,CAAtD;EACD,CAFO;;EAIApB,kDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,iDAAiD,CAAC8B,MAAD,EAASD,OAAT,CAAxD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAA+CzB,QAA/C","names":["RecognizeUtteranceRequest","RecognizeUtteranceResponse","deserializeAws_restJson1RecognizeUtteranceCommand","serializeAws_restJson1RecognizeUtteranceCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","RecognizeUtteranceCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/commands/RecognizeUtteranceCommand.ts"],"sourcesContent":["import { LexRuntimeV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../LexRuntimeV2Client\";\nimport { RecognizeUtteranceRequest, RecognizeUtteranceResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1RecognizeUtteranceCommand,\n  serializeAws_restJson1RecognizeUtteranceCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\ntype RecognizeUtteranceCommandInputType = Omit<RecognizeUtteranceRequest, \"inputStream\"> & {\n  /**\n   * For *`RecognizeUtteranceRequest[\"inputStream\"]`*, see {@link RecognizeUtteranceRequest.inputStream}.\n   */\n  inputStream?: RecognizeUtteranceRequest[\"inputStream\"] | string | Uint8Array | Buffer;\n};\n/**\n * This interface extends from `RecognizeUtteranceRequest` interface. There are more parameters than `inputStream` defined in {@link RecognizeUtteranceRequest}\n */\nexport interface RecognizeUtteranceCommandInput extends RecognizeUtteranceCommandInputType {}\nexport interface RecognizeUtteranceCommandOutput extends RecognizeUtteranceResponse, __MetadataBearer {}\n\n/**\n * <p>Sends user input to Amazon Lex V2. You can send text or speech. Clients use\n *          this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2\n *          interprets the user input using the machine learning model built for\n *          the bot.</p>\n *          <p>The following request fields must be compressed with gzip and then\n *          base64 encoded before you send them to Amazon Lex V2. </p>\n *          <ul>\n *             <li>\n *                <p>requestAttributes</p>\n *             </li>\n *             <li>\n *                <p>sessionState</p>\n *             </li>\n *          </ul>\n *          <p>The following response fields are compressed using gzip and then\n *          base64 encoded by Amazon Lex V2. Before you can use these fields, you must\n *          decode and decompress them. </p>\n *          <ul>\n *             <li>\n *                <p>inputTranscript</p>\n *             </li>\n *             <li>\n *                <p>interpretations</p>\n *             </li>\n *             <li>\n *                <p>messages</p>\n *             </li>\n *             <li>\n *                <p>requestAttributes</p>\n *             </li>\n *             <li>\n *                <p>sessionState</p>\n *             </li>\n *          </ul>\n *          <p>The example contains a Java application that compresses and encodes\n *          a Java object to send to Amazon Lex V2, and a second that decodes and\n *          decompresses a response from Amazon Lex V2.</p>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LexRuntimeV2Client, RecognizeUtteranceCommand } from \"@aws-sdk/client-lex-runtime-v2\"; // ES Modules import\n * // const { LexRuntimeV2Client, RecognizeUtteranceCommand } = require(\"@aws-sdk/client-lex-runtime-v2\"); // CommonJS import\n * const client = new LexRuntimeV2Client(config);\n * const command = new RecognizeUtteranceCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link RecognizeUtteranceCommandInput} for command's `input` shape.\n * @see {@link RecognizeUtteranceCommandOutput} for command's `response` shape.\n * @see {@link LexRuntimeV2ClientResolvedConfig | config} for command's `input` shape.\n *\n */\nexport class RecognizeUtteranceCommand extends $Command<\n  RecognizeUtteranceCommandInput,\n  RecognizeUtteranceCommandOutput,\n  LexRuntimeV2ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: RecognizeUtteranceCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: LexRuntimeV2ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<RecognizeUtteranceCommandInput, RecognizeUtteranceCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"LexRuntimeV2Client\";\n    const commandName = \"RecognizeUtteranceCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: RecognizeUtteranceRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: RecognizeUtteranceResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: RecognizeUtteranceCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restJson1RecognizeUtteranceCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<RecognizeUtteranceCommandOutput> {\n    return deserializeAws_restJson1RecognizeUtteranceCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}