{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { getSkewCorrectedDate } from \"./utils/getSkewCorrectedDate\";\nimport { getUpdatedSystemClockOffset } from \"./utils/getUpdatedSystemClockOffset\";\nexport var awsAuthMiddleware = function (options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer, output, _a, _b, headers, dateHeader;\n\n        var _c;\n\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) return [2\n              /*return*/\n              , next(args)];\n              return [4\n              /*yield*/\n              , options.signer()];\n\n            case 1:\n              signer = _d.sent();\n              _a = next;\n              _b = [__assign({}, args)];\n              _c = {};\n              return [4\n              /*yield*/\n              , signer.sign(args.request, {\n                signingDate: getSkewCorrectedDate(options.systemClockOffset),\n                signingRegion: context[\"signing_region\"],\n                signingService: context[\"signing_service\"]\n              })];\n\n            case 2:\n              return [4\n              /*yield*/\n              , _a.apply(void 0, [__assign.apply(void 0, _b.concat([(_c.request = _d.sent(), _c)]))]).catch(function (error) {\n                if (error.ServerTime) {\n                  options.systemClockOffset = getUpdatedSystemClockOffset(error.ServerTime, options.systemClockOffset);\n                }\n\n                throw error;\n              })];\n\n            case 3:\n              output = _d.sent();\n              headers = output.response.headers;\n              dateHeader = headers && (headers.date || headers.Date);\n\n              if (dateHeader) {\n                options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n              }\n\n              return [2\n              /*return*/\n              , output];\n          }\n        });\n      });\n    };\n  };\n};\nexport var awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport var getAwsAuthPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    }\n  };\n};\nexport var getSigV4AuthPlugin = getAwsAuthPlugin;","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAYA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,2BAAT,QAA4C,qCAA5C;AAEA,OAAO,IAAMC,iBAAiB,GAC5B,UACEC,OADF,EACgC;EAEhC,iBAACC,IAAD,EAAuCC,OAAvC,EAAuE;IACrE,iBAAgBC,IAAhB,EAAqD;;;;;;;;;cACnD,IAAI,CAACP,WAAW,CAACQ,UAAZ,CAAuBD,IAAI,CAACE,OAA5B,CAAL,EAA2C;cAAA;cAAA,EAAOJ,IAAI,CAACE,IAAD,CAAX;cAC5B;cAAA;cAAA,EAAMH,OAAO,CAACM,MAAR,EAAN;;;cAATA,MAAM,GAAGC,SAAT;cACeC;iCAChBL;;cACM;cAAA;cAAA,EAAMG,MAAM,CAACG,IAAP,CAAYN,IAAI,CAACE,OAAjB,EAA0B;gBACvCK,WAAW,EAAEb,oBAAoB,CAACG,OAAO,CAACW,iBAAT,CADM;gBAEvCC,aAAa,EAAEV,OAAO,CAAC,gBAAD,CAFiB;gBAGvCW,cAAc,EAAEX,OAAO,CAAC,iBAAD;cAHgB,CAA1B,CAAN;;;cAFI;cAAA;cAAA,EAAMM,qDAEnBM,aAASP,SAAT,EAIEO,EANiB,OAOlBC,KAPkB,CAOZ,UAACC,KAAD,EAAM;gBACb,IAAIA,KAAK,CAACC,UAAV,EAAsB;kBACpBjB,OAAO,CAACW,iBAAR,GAA4Bb,2BAA2B,CAACkB,KAAK,CAACC,UAAP,EAAmBjB,OAAO,CAACW,iBAA3B,CAAvD;gBACD;;gBACD,MAAMK,KAAN;cACD,CAZoB,CAAN;;;cAATE,MAAM,GAAGX,SAAT;cAcEY,OAAO,GAAKD,MAAM,CAACE,QAAP,CAAsBD,OAAlC;cACFE,UAAU,GAAGF,OAAO,KAAKA,OAAO,CAACG,IAAR,IAAgBH,OAAO,CAACI,IAA7B,CAApB;;cACN,IAAIF,UAAJ,EAAgB;gBACdrB,OAAO,CAACW,iBAAR,GAA4Bb,2BAA2B,CAACuB,UAAD,EAAarB,OAAO,CAACW,iBAArB,CAAvD;cACD;;cAED;cAAA;cAAA,EAAOO,MAAP;;;;IACD,CAxBD;EAwBC,CAzBH;AAyBG,CA7BE;AA+BP,OAAO,IAAMM,wBAAwB,GAA8B;EACjEC,IAAI,EAAE,mBAD2D;EAEjEC,IAAI,EAAE,CAAC,WAAD,EAAc,SAAd,CAF2D;EAGjEC,QAAQ,EAAE,OAHuD;EAIjEC,YAAY,EAAE,iBAJmD;EAKjEC,QAAQ,EAAE;AALuD,CAA5D;AAQP,OAAO,IAAMC,gBAAgB,GAAG,UAAC9B,OAAD,EAA+B;EAA0B,OAAC;IACxF+B,YAAY,EAAE,UAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,aAAZ,CAA0BlC,iBAAiB,CAACC,OAAD,CAA3C,EAAsDwB,wBAAtD;IACD;EAHuF,CAAD;AAIvF,CAJK;AAMP,OAAO,IAAMU,kBAAkB,GAAGJ,gBAA3B","names":["HttpRequest","getSkewCorrectedDate","getUpdatedSystemClockOffset","awsAuthMiddleware","options","next","context","args","isInstance","request","signer","_d","_a","sign","signingDate","systemClockOffset","signingRegion","signingService","_c","catch","error","ServerTime","output","headers","response","dateHeader","date","Date","awsAuthMiddlewareOptions","name","tags","relation","toMiddleware","override","getAwsAuthPlugin","applyToStack","clientStack","addRelativeTo","getSigV4AuthPlugin"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/middleware-signing/src/middleware.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestMiddleware,\n  HandlerExecutionContext,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\n\nimport { AwsAuthResolvedConfig } from \"./configurations\";\nimport { getSkewCorrectedDate } from \"./utils/getSkewCorrectedDate\";\nimport { getUpdatedSystemClockOffset } from \"./utils/getUpdatedSystemClockOffset\";\n\nexport const awsAuthMiddleware =\n  <Input extends object, Output extends object>(\n    options: AwsAuthResolvedConfig\n  ): FinalizeRequestMiddleware<Input, Output> =>\n  (next: FinalizeHandler<Input, Output>, context: HandlerExecutionContext): FinalizeHandler<Input, Output> =>\n    async function (args: FinalizeHandlerArguments<Input>): Promise<FinalizeHandlerOutput<Output>> {\n      if (!HttpRequest.isInstance(args.request)) return next(args);\n      const signer = await options.signer();\n      const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n          signingDate: getSkewCorrectedDate(options.systemClockOffset),\n          signingRegion: context[\"signing_region\"],\n          signingService: context[\"signing_service\"],\n        }),\n      }).catch((error) => {\n        if (error.ServerTime) {\n          options.systemClockOffset = getUpdatedSystemClockOffset(error.ServerTime, options.systemClockOffset);\n        }\n        throw error;\n      });\n\n      const { headers } = output.response as any;\n      const dateHeader = headers && (headers.date || headers.Date);\n      if (dateHeader) {\n        options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n      }\n\n      return output;\n    };\n\nexport const awsAuthMiddlewareOptions: RelativeMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true,\n};\n\nexport const getAwsAuthPlugin = (options: AwsAuthResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n  },\n});\n\nexport const getSigV4AuthPlugin = getAwsAuthPlugin;\n"]},"metadata":{},"sourceType":"module"}