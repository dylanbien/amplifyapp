{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var memoize = function (provider, isExpired, requiresRefresh) {\n  var resolved;\n  var pending;\n  var hasResult; // Wrapper over supplied provider with side effect to handle concurrent invocation.\n\n  var coalesceProvider = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!pending) {\n              pending = provider();\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n\n            return [4\n            /*yield*/\n            , pending];\n\n          case 2:\n            resolved = _a.sent();\n            hasResult = true;\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            pending = undefined;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            , resolved];\n        }\n      });\n    });\n  };\n\n  if (isExpired === undefined) {\n    // This is a static memoization; no need to incorporate refreshing\n    return function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!!hasResult) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , coalesceProvider()];\n\n            case 1:\n              resolved = _a.sent();\n              _a.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              , resolved];\n          }\n        });\n      });\n    };\n  }\n\n  var isConstant = false;\n  return function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!hasResult) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , coalesceProvider()];\n\n          case 1:\n            resolved = _a.sent();\n            _a.label = 2;\n\n          case 2:\n            if (isConstant) {\n              return [2\n              /*return*/\n              , resolved];\n            }\n\n            if (requiresRefresh && !requiresRefresh(resolved)) {\n              isConstant = true;\n              return [2\n              /*return*/\n              , resolved];\n            }\n\n            if (!isExpired(resolved)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , coalesceProvider()];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , resolved];\n\n          case 4:\n            return [2\n            /*return*/\n            , resolved];\n        }\n      });\n    });\n  };\n};","map":{"version":3,"mappings":";AA0CA,OAAO,IAAMA,OAAO,GAAoB,UACtCC,QADsC,EAEtCC,SAFsC,EAGtCC,eAHsC,EAGI;EAE1C,IAAIC,QAAJ;EACA,IAAIC,OAAJ;EACA,IAAIC,SAAJ,CAJ0C,CAK1C;;EACA,IAAMC,gBAAgB,GAAgB;IAAA;;;;YACpC,IAAI,CAACF,OAAL,EAAc;cACZA,OAAO,GAAGJ,QAAQ,EAAlB;YACD;;;;;;;YAEY;YAAA;YAAA,EAAMI,OAAN;;;YAAXD,QAAQ,GAAGI,SAAX;YACAF,SAAS,GAAG,IAAZ;;;;;;YAEAD,OAAO,GAAGI,SAAV;;;;;;YAEF;YAAA;YAAA,EAAOL,QAAP;;;KAVoC;EAWrC,CAXD;;EAaA,IAAIF,SAAS,KAAKO,SAAlB,EAA6B;IAC3B;IACA,OAAO;MAAA;;;;mBACD,CAACH,WAAD;cAAA;cAAA;cACS;cAAA;cAAA,EAAMC,gBAAgB,EAAtB;;;cAAXH,QAAQ,GAAGI,SAAX;;;;cAEF;cAAA;cAAA,EAAOJ,QAAP;;;OAJK;IAKN,CALD;EAMD;;EAED,IAAIM,UAAU,GAAG,KAAjB;EAEA,OAAO;IAAA;;;;iBACD,CAACJ,WAAD;YAAA;YAAA;YACS;YAAA;YAAA,EAAMC,gBAAgB,EAAtB;;;YAAXH,QAAQ,GAAGI,SAAX;;;;YAEF,IAAIE,UAAJ,EAAgB;cACd;cAAA;cAAA,EAAON,QAAP;YACD;;YAED,IAAID,eAAe,IAAI,CAACA,eAAe,CAACC,QAAD,CAAvC,EAAmD;cACjDM,UAAU,GAAG,IAAb;cACA;cAAA;cAAA,EAAON,QAAP;YACD;;iBACGF,SAAS,CAACE,QAAD,GAAT;YAAA;YAAA;YACF;YAAA;YAAA,EAAMG,gBAAgB,EAAtB;;;YAAAC;;YACA;YAAA;YAAA,EAAOJ,QAAP;;;YAEF;YAAA;YAAA,EAAOA,QAAP;;;KAhBK;EAiBN,CAjBD;AAkBD,CApDM","names":["memoize","provider","isExpired","requiresRefresh","resolved","pending","hasResult","coalesceProvider","_a","undefined","isConstant"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/property-provider/src/memoize.ts"],"sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\ninterface MemoizeOverload {\n  /**\n   *\n   * Decorates a provider function with either static memoization.\n   *\n   * To create a statically memoized provider, supply a provider as the only\n   * argument to this function. The provider will be invoked once, and all\n   * invocations of the provider returned by `memoize` will return the same\n   * promise object.\n   *\n   * @param provider The provider whose result should be cached indefinitely.\n   */\n  <T>(provider: Provider<T>): Provider<T>;\n\n  /**\n   * Decorates a provider function with refreshing memoization.\n   *\n   * @param provider          The provider whose result should be cached.\n   * @param isExpired         A function that will evaluate the resolved value and\n   *                          determine if it is expired. For example, when\n   *                          memoizing AWS credential providers, this function\n   *                          should return `true` when the credential's\n   *                          expiration is in the past (or very near future) and\n   *                          `false` otherwise.\n   * @param requiresRefresh   A function that will evaluate the resolved value and\n   *                          determine if it represents static value or one that\n   *                          will eventually need to be refreshed. For example,\n   *                          AWS credentials that have no defined expiration will\n   *                          never need to be refreshed, so this function would\n   *                          return `true` if the credentials resolved by the\n   *                          underlying provider had an expiration and `false`\n   *                          otherwise.\n   */\n  <T>(\n    provider: Provider<T>,\n    isExpired: (resolved: T) => boolean,\n    requiresRefresh?: (resolved: T) => boolean\n  ): Provider<T>;\n}\n\nexport const memoize: MemoizeOverload = <T>(\n  provider: Provider<T>,\n  isExpired?: (resolved: T) => boolean,\n  requiresRefresh?: (resolved: T) => boolean\n): Provider<T> => {\n  let resolved: T;\n  let pending: Promise<T> | undefined;\n  let hasResult: boolean;\n  // Wrapper over supplied provider with side effect to handle concurrent invocation.\n  const coalesceProvider: Provider<T> = async () => {\n    if (!pending) {\n      pending = provider();\n    }\n    try {\n      resolved = await pending;\n      hasResult = true;\n    } finally {\n      pending = undefined;\n    }\n    return resolved;\n  };\n\n  if (isExpired === undefined) {\n    // This is a static memoization; no need to incorporate refreshing\n    return async () => {\n      if (!hasResult) {\n        resolved = await coalesceProvider();\n      }\n      return resolved;\n    };\n  }\n\n  let isConstant = false;\n\n  return async () => {\n    if (!hasResult) {\n      resolved = await coalesceProvider();\n    }\n    if (isConstant) {\n      return resolved;\n    }\n\n    if (requiresRefresh && !requiresRefresh(resolved)) {\n      isConstant = true;\n      return resolved;\n    }\n    if (isExpired(resolved)) {\n      await coalesceProvider();\n      return resolved;\n    }\n    return resolved;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}