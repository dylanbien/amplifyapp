{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { normalizeRegion } from \"./normalizeRegion\";\nexport var resolveRegionConfig = function (input) {\n  if (!input.region) {\n    throw new Error(\"Region is missing\");\n  }\n\n  return __assign(__assign({}, input), {\n    region: normalizeRegion(input.region)\n  });\n};","map":{"version":3,"mappings":";AAEA,SAASA,eAAT,QAAgC,mBAAhC;AAkBA,OAAO,IAAMC,mBAAmB,GAAG,UAAIC,KAAJ,EAAqD;EACtF,IAAI,CAACA,KAAK,CAACC,MAAX,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;EACD;;EACD,6BACKF,KADL,GACU;IACRC,MAAM,EAAEH,eAAe,CAACE,KAAK,CAACC,MAAP;EADf,CADV;AAID,CARM","names":["normalizeRegion","resolveRegionConfig","input","region","Error"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/config-resolver/src/regionConfig/resolveRegionConfig.ts"],"sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\nimport { normalizeRegion } from \"./normalizeRegion\";\n\nexport interface RegionInputConfig {\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | Provider<string>;\n}\n\ninterface PreviouslyResolved {}\n\nexport interface RegionResolvedConfig {\n  /**\n   * Resolved value for input config {@link RegionInputConfig.region}\n   */\n  region: Provider<string>;\n}\n\nexport const resolveRegionConfig = <T>(input: T & RegionInputConfig & PreviouslyResolved): T & RegionResolvedConfig => {\n  if (!input.region) {\n    throw new Error(\"Region is missing\");\n  }\n  return {\n    ...input,\n    region: normalizeRegion(input.region!),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}