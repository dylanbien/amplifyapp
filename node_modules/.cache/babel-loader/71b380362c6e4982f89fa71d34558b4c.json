{"ast":null,"code":"/**\n * Lazy String holder for JSON typed contents.\n */\nimport { __extends, __read, __spreadArray } from \"tslib\";\n/**\n * Because of https://github.com/microsoft/tslib/issues/95,\n * TS 'extends' shim doesn't support extending native types like String.\n * So here we create StringWrapper that duplicate everything from String\n * class including its prototype chain. So we can extend from here.\n */\n// @ts-ignore StringWrapper implementation is not a simple constructor\n\nexport var StringWrapper = function () {\n  //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any\n  var Class = Object.getPrototypeOf(this).constructor;\n  var Constructor = Function.bind.apply(String, __spreadArray([null], __read(arguments), false)); //@ts-ignore Call wrapped String constructor directly, don't bother typing it.\n\n  var instance = new Constructor();\n  Object.setPrototypeOf(instance, Class.prototype);\n  return instance;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n  constructor: {\n    value: StringWrapper,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\nObject.setPrototypeOf(StringWrapper, String);\n\nvar LazyJsonString =\n/** @class */\nfunction (_super) {\n  __extends(LazyJsonString, _super);\n\n  function LazyJsonString() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LazyJsonString.prototype.deserializeJSON = function () {\n    return JSON.parse(_super.prototype.toString.call(this));\n  };\n\n  LazyJsonString.prototype.toJSON = function () {\n    return _super.prototype.toString.call(this);\n  };\n\n  LazyJsonString.fromObject = function (object) {\n    if (object instanceof LazyJsonString) {\n      return object;\n    } else if (object instanceof String || typeof object === \"string\") {\n      return new LazyJsonString(object);\n    }\n\n    return new LazyJsonString(JSON.stringify(object));\n  };\n\n  return LazyJsonString;\n}(StringWrapper);\n\nexport { LazyJsonString };","map":{"version":3,"mappings":"AAAA;;;;AAQA;;;;;;AAMA;;AACA,OAAO,IAAMA,aAAa,GAAkB;EAC1C;EACA,IAAMC,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BC,WAA1C;EACA,IAAMC,WAAW,GAAGC,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,MAApB,EAA0BC,eAAG,IAAH,GAAcC,OAAKC,SAAL,CAAd,EAA4B,KAA5B,CAA1B,CAApB,CAH0C,CAI1C;;EACA,IAAMC,QAAQ,GAAG,IAAIR,WAAJ,EAAjB;EACAH,MAAM,CAACY,cAAP,CAAsBD,QAAtB,EAAgCZ,KAAK,CAACc,SAAtC;EACA,OAAOF,QAAP;AACD,CARM;AASPb,aAAa,CAACe,SAAd,GAA0Bb,MAAM,CAACc,MAAP,CAAcP,MAAM,CAACM,SAArB,EAAgC;EACxDX,WAAW,EAAE;IACXa,KAAK,EAAEjB,aADI;IAEXkB,UAAU,EAAE,KAFD;IAGXC,QAAQ,EAAE,IAHC;IAIXC,YAAY,EAAE;EAJH;AAD2C,CAAhC,CAA1B;AAQAlB,MAAM,CAACY,cAAP,CAAsBd,aAAtB,EAAqCS,MAArC;;AAEA;AAAA;AAAA;EAAoCY;;EAApC;;EAiBC;;EAhBCC;IACE,OAAOC,IAAI,CAACC,KAAL,CAAWC,iBAAMC,QAAN,CAAcC,IAAd,CAAc,IAAd,CAAX,CAAP;EACD,CAFD;;EAIAL;IACE,OAAOG,iBAAMC,QAAN,CAAcC,IAAd,CAAc,IAAd,CAAP;EACD,CAFD;;EAIOL,4BAAP,UAAkBM,MAAlB,EAA6B;IAC3B,IAAIA,MAAM,YAAYN,cAAtB,EAAsC;MACpC,OAAOM,MAAP;IACD,CAFD,MAEO,IAAIA,MAAM,YAAYnB,MAAlB,IAA4B,OAAOmB,MAAP,KAAkB,QAAlD,EAA4D;MACjE,OAAO,IAAIN,cAAJ,CAAmBM,MAAnB,CAAP;IACD;;IACD,OAAO,IAAIN,cAAJ,CAAmBC,IAAI,CAACM,SAAL,CAAeD,MAAf,CAAnB,CAAP;EACD,CAPM;;EAQT;AAAC,CAjBD,CAAoC5B,aAApC","names":["StringWrapper","Class","Object","getPrototypeOf","constructor","Constructor","Function","bind","apply","String","__spreadArray","__read","arguments","instance","setPrototypeOf","prototype","create","value","enumerable","writable","configurable","__extends","LazyJsonString","JSON","parse","_super","toString","call","object","stringify"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/smithy-client/src/lazy-json.ts"],"sourcesContent":["/**\n * Lazy String holder for JSON typed contents.\n */\n\ninterface StringWrapper {\n  new (arg: any): String;\n}\n\n/**\n * Because of https://github.com/microsoft/tslib/issues/95,\n * TS 'extends' shim doesn't support extending native types like String.\n * So here we create StringWrapper that duplicate everything from String\n * class including its prototype chain. So we can extend from here.\n */\n// @ts-ignore StringWrapper implementation is not a simple constructor\nexport const StringWrapper: StringWrapper = function () {\n  //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any\n  const Class = Object.getPrototypeOf(this).constructor;\n  const Constructor = Function.bind.apply(String, [null as any, ...arguments]);\n  //@ts-ignore Call wrapped String constructor directly, don't bother typing it.\n  const instance = new Constructor();\n  Object.setPrototypeOf(instance, Class.prototype);\n  return instance as String;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n  constructor: {\n    value: StringWrapper,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\nObject.setPrototypeOf(StringWrapper, String);\n\nexport class LazyJsonString extends StringWrapper {\n  deserializeJSON(): any {\n    return JSON.parse(super.toString());\n  }\n\n  toJSON(): string {\n    return super.toString();\n  }\n\n  static fromObject(object: any): LazyJsonString {\n    if (object instanceof LazyJsonString) {\n      return object;\n    } else if (object instanceof String || typeof object === \"string\") {\n      return new LazyJsonString(object);\n    }\n    return new LazyJsonString(JSON.stringify(object));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}