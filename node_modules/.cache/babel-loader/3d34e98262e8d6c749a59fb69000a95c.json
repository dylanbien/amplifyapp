{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\"; // 5 minutes buffer time the refresh the credential before it really expires\n\nvar CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport var resolveAwsAuthConfig = function (input) {\n  var normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  var _a = input.signingEscapePath,\n      signingEscapePath = _a === void 0 ? true : _a,\n      _b = input.systemClockOffset,\n      systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b,\n      sha256 = input.sha256;\n  var signer;\n\n  if (input.signer) {\n    //if signer is supplied by user, normalize it to a function returning a promise for signer.\n    signer = normalizeProvider(input.signer);\n  } else {\n    //construct a provider inferring signing from region.\n    signer = function () {\n      return normalizeProvider(input.region)().then(function (region) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , input.regionInfoProvider(region)];\n\n              case 1:\n                return [2\n                /*return*/\n                , [_a.sent() || {}, region]];\n            }\n          });\n        });\n      }).then(function (_a) {\n        var _b = __read(_a, 2),\n            regionInfo = _b[0],\n            region = _b[1];\n\n        var signingRegion = regionInfo.signingRegion,\n            signingService = regionInfo.signingService; //update client's singing region and signing service config if they are resolved.\n        //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region\n\n        input.signingRegion = input.signingRegion || signingRegion || region; //signing name resolving order:\n        //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id\n\n        input.signingName = input.signingName || signingService || input.serviceId;\n        return new SignatureV4({\n          credentials: normalizedCreds,\n          region: input.signingRegion,\n          service: input.signingName,\n          sha256: sha256,\n          uriEscapePath: signingEscapePath\n        });\n      });\n    };\n  }\n\n  return __assign(__assign({}, input), {\n    systemClockOffset: systemClockOffset,\n    signingEscapePath: signingEscapePath,\n    credentials: normalizedCreds,\n    signer: signer\n  });\n}; // TODO: reduce code duplication\n\nexport var resolveSigV4AuthConfig = function (input) {\n  var normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  var _a = input.signingEscapePath,\n      signingEscapePath = _a === void 0 ? true : _a,\n      _b = input.systemClockOffset,\n      systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b,\n      sha256 = input.sha256;\n  var signer;\n\n  if (input.signer) {\n    //if signer is supplied by user, normalize it to a function returning a promise for signer.\n    signer = normalizeProvider(input.signer);\n  } else {\n    signer = normalizeProvider(new SignatureV4({\n      credentials: normalizedCreds,\n      region: input.region,\n      service: input.signingName,\n      sha256: sha256,\n      uriEscapePath: signingEscapePath\n    }));\n  }\n\n  return __assign(__assign({}, input), {\n    systemClockOffset: systemClockOffset,\n    signingEscapePath: signingEscapePath,\n    credentials: normalizedCreds,\n    signer: signer\n  });\n};\n\nvar normalizeProvider = function (input) {\n  if (typeof input === \"object\") {\n    var promisified_1 = Promise.resolve(input);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return input;\n};\n\nvar normalizeCredentialProvider = function (credentials) {\n  if (typeof credentials === \"function\") {\n    return memoize(credentials, function (credentials) {\n      return credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW;\n    }, function (credentials) {\n      return credentials.expiration !== undefined;\n    });\n  }\n\n  return normalizeProvider(credentials);\n};","map":{"version":3,"mappings":"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","names":["memoize","SignatureV4","CREDENTIAL_EXPIRE_WINDOW","resolveAwsAuthConfig","input","normalizedCreds","credentials","normalizeCredentialProvider","credentialDefaultProvider","_a","_b","systemClockOffset","sha256","signer","normalizeProvider","region","then","regionInfoProvider","regionInfo","signingService","signingRegion","signingName","serviceId","service","uriEscapePath","signingEscapePath","resolveSigV4AuthConfig","promisified_1","Promise","resolve","expiration","undefined","getTime","Date","now"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/middleware-signing/src/configurations.ts"],"sourcesContent":["import { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { Credentials, HashConstructor, Provider, RegionInfo, RegionInfoProvider, RequestSigner } from \"@aws-sdk/types\";\n\n// 5 minutes buffer time the refresh the credential before it really expires\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\n\n// AwsAuth v/s SigV4Auth\n// AwsAuth: specific to SigV4 auth for AWS services\n// SigV4Auth: SigV4 auth for non-AWS services\n\nexport interface AwsAuthInputConfig {\n  /**\n   * The credentials used to sign requests.\n   */\n  credentials?: Credentials | Provider<Credentials>;\n\n  /**\n   * The signer to use when signing requests.\n   */\n  signer?: RequestSigner | Provider<RequestSigner>;\n\n  /**\n   * Whether to escape request path when signing the request.\n   */\n  signingEscapePath?: boolean;\n\n  /**\n   * An offset value in milliseconds to apply to all signing times.\n   */\n  systemClockOffset?: number;\n\n  /**\n   * The region where you want to sign your request against. This\n   * can be different to the region in the endpoint.\n   */\n  signingRegion?: string;\n}\n\nexport interface SigV4AuthInputConfig {\n  /**\n   * The credentials used to sign requests.\n   */\n  credentials?: Credentials | Provider<Credentials>;\n\n  /**\n   * The signer to use when signing requests.\n   */\n  signer?: RequestSigner | Provider<RequestSigner>;\n\n  /**\n   * Whether to escape request path when signing the request.\n   */\n  signingEscapePath?: boolean;\n\n  /**\n   * An offset value in milliseconds to apply to all signing times.\n   */\n  systemClockOffset?: number;\n}\n\ninterface PreviouslyResolved {\n  credentialDefaultProvider: (input: any) => Provider<Credentials>;\n  region: string | Provider<string>;\n  regionInfoProvider: RegionInfoProvider;\n  signingName?: string;\n  serviceId: string;\n  sha256: HashConstructor;\n}\n\ninterface SigV4PreviouslyResolved {\n  credentialDefaultProvider: (input: any) => Provider<Credentials>;\n  region: string | Provider<string>;\n  signingName: string;\n  sha256: HashConstructor;\n}\n\nexport interface AwsAuthResolvedConfig {\n  /**\n   * Resolved value for input config {@link AwsAuthInputConfig.credentials}\n   */\n  credentials: Provider<Credentials>;\n  /**\n   * Resolved value for input config {@link AwsAuthInputConfig.signer}\n   */\n  signer: Provider<RequestSigner>;\n  /**\n   * Resolved value for input config {@link AwsAuthInputConfig.signingEscapePath}\n   */\n  signingEscapePath: boolean;\n  /**\n   * Resolved value for input config {@link AwsAuthInputConfig.systemClockOffset}\n   */\n  systemClockOffset: number;\n}\n\nexport interface SigV4AuthResolvedConfig extends AwsAuthResolvedConfig {}\n\nexport const resolveAwsAuthConfig = <T>(\n  input: T & AwsAuthInputConfig & PreviouslyResolved\n): T & AwsAuthResolvedConfig => {\n  const normalizedCreds = input.credentials\n    ? normalizeCredentialProvider(input.credentials)\n    : input.credentialDefaultProvider(input as any);\n  const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n  let signer: Provider<RequestSigner>;\n  if (input.signer) {\n    //if signer is supplied by user, normalize it to a function returning a promise for signer.\n    signer = normalizeProvider(input.signer);\n  } else {\n    //construct a provider inferring signing from region.\n    signer = () =>\n      normalizeProvider(input.region)()\n        .then(async (region) => [(await input.regionInfoProvider(region)) || {}, region] as [RegionInfo, string])\n        .then(([regionInfo, region]) => {\n          const { signingRegion, signingService } = regionInfo;\n          //update client's singing region and signing service config if they are resolved.\n          //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region\n          input.signingRegion = input.signingRegion || signingRegion || region;\n          //signing name resolving order:\n          //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id\n          input.signingName = input.signingName || signingService || input.serviceId;\n\n          return new SignatureV4({\n            credentials: normalizedCreds,\n            region: input.signingRegion,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n          });\n        });\n  }\n\n  return {\n    ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer,\n  };\n};\n\n// TODO: reduce code duplication\nexport const resolveSigV4AuthConfig = <T>(\n  input: T & SigV4AuthInputConfig & SigV4PreviouslyResolved\n): T & SigV4AuthResolvedConfig => {\n  const normalizedCreds = input.credentials\n    ? normalizeCredentialProvider(input.credentials)\n    : input.credentialDefaultProvider(input as any);\n  const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n  let signer: Provider<RequestSigner>;\n  if (input.signer) {\n    //if signer is supplied by user, normalize it to a function returning a promise for signer.\n    signer = normalizeProvider(input.signer);\n  } else {\n    signer = normalizeProvider(\n      new SignatureV4({\n        credentials: normalizedCreds,\n        region: input.region,\n        service: input.signingName,\n        sha256,\n        uriEscapePath: signingEscapePath,\n      })\n    );\n  }\n\n  return {\n    ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer,\n  };\n};\n\nconst normalizeProvider = <T>(input: T | Provider<T>): Provider<T> => {\n  if (typeof input === \"object\") {\n    const promisified = Promise.resolve(input);\n    return () => promisified;\n  }\n  return input as Provider<T>;\n};\n\nconst normalizeCredentialProvider = (credentials: Credentials | Provider<Credentials>): Provider<Credentials> => {\n  if (typeof credentials === \"function\") {\n    return memoize(\n      credentials,\n      (credentials) =>\n        credentials.expiration !== undefined &&\n        credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW,\n      (credentials) => credentials.expiration !== undefined\n    );\n  }\n  return normalizeProvider(credentials);\n};\n"]},"metadata":{},"sourceType":"module"}