{"ast":null,"code":"import { getHostnameTemplate } from \"./getHostnameTemplate\";\nexport var getResolvedHostname = function (region, _a) {\n  var _b, _c;\n\n  var signingService = _a.signingService,\n      regionHash = _a.regionHash,\n      partitionHash = _a.partitionHash;\n  return (_c = (_b = regionHash[region]) === null || _b === void 0 ? void 0 : _b.hostname) !== null && _c !== void 0 ? _c : getHostnameTemplate(region, {\n    signingService: signingService,\n    partitionHash: partitionHash\n  }).replace(\"{region}\", region);\n};","map":{"version":3,"mappings":"AAEA,SAASA,mBAAT,QAAgE,uBAAhE;AAaA,OAAO,IAAMC,mBAAmB,GAAG,UACjCC,MADiC,EAEjCC,EAFiC,EAEwC;;;MAAvEC,cAAc;MAAEC,UAAU;MAAEC,aAAa;EAE3C,6BAAU,CAACJ,MAAD,CAAV,MAAkB,IAAlB,IAAkBK,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEC,QAApB,MAA4B,IAA5B,IAA4BC,aAA5B,GAA4BA,EAA5B,GACAT,mBAAmB,CAACE,MAAD,EAAS;IAAEE,cAAc,gBAAhB;IAAkBE,aAAa;EAA/B,CAAT,CAAnB,CAA+DI,OAA/D,CAAuE,UAAvE,EAAmFR,MAAnF,CADA;AAC0F,CALrF","names":["getHostnameTemplate","getResolvedHostname","region","_a","signingService","regionHash","partitionHash","_b","hostname","_c","replace"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/config-resolver/src/regionInfo/getResolvedHostname.ts"],"sourcesContent":["import { RegionInfo } from \"@aws-sdk/types\";\n\nimport { getHostnameTemplate, GetHostnameTemplateOptions } from \"./getHostnameTemplate\";\nimport { GetResolvedPartitionOptions } from \"./getResolvedPartition\";\n\nexport type RegionHash = { [key: string]: Partial<Omit<RegionInfo, \"partition\" | \"path\">> };\n\nexport interface GetResolvedHostnameOptions extends GetHostnameTemplateOptions, GetResolvedPartitionOptions {\n  /**\n   * The hash of region with the information specific to that region.\n   * The information can include hostname, signingService and signingRegion.\n   */\n  regionHash: RegionHash;\n}\n\nexport const getResolvedHostname = (\n  region: string,\n  { signingService, regionHash, partitionHash }: GetResolvedHostnameOptions\n) =>\n  regionHash[region]?.hostname ??\n  getHostnameTemplate(region, { signingService, partitionHash }).replace(\"{region}\", region);\n"]},"metadata":{},"sourceType":"module"}