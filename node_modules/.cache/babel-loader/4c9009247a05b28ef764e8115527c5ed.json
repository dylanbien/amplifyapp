{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { LexRuntimeV2Client } from \"./LexRuntimeV2Client\";\nimport { DeleteSessionCommand } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\nimport { RecognizeTextCommand } from \"./commands/RecognizeTextCommand\";\nimport { RecognizeUtteranceCommand } from \"./commands/RecognizeUtteranceCommand\";\nimport { StartConversationCommand } from \"./commands/StartConversationCommand\";\n/**\n * <p></p>\n */\n\nvar LexRuntimeV2 =\n/** @class */\nfunction (_super) {\n  __extends(LexRuntimeV2, _super);\n\n  function LexRuntimeV2() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LexRuntimeV2.prototype.deleteSession = function (args, optionsOrCb, cb) {\n    var command = new DeleteSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.getSession = function (args, optionsOrCb, cb) {\n    var command = new GetSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.putSession = function (args, optionsOrCb, cb) {\n    var command = new PutSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.recognizeText = function (args, optionsOrCb, cb) {\n    var command = new RecognizeTextCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.recognizeUtterance = function (args, optionsOrCb, cb) {\n    var command = new RecognizeUtteranceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.startConversation = function (args, optionsOrCb, cb) {\n    var command = new StartConversationCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return LexRuntimeV2;\n}(LexRuntimeV2Client);\n\nexport { LexRuntimeV2 };","map":{"version":3,"mappings":"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","names":["LexRuntimeV2Client","DeleteSessionCommand","GetSessionCommand","PutSessionCommand","RecognizeTextCommand","RecognizeUtteranceCommand","StartConversationCommand","__extends","LexRuntimeV2","args","optionsOrCb","cb","command","send","Error"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/LexRuntimeV2.ts"],"sourcesContent":["import { LexRuntimeV2Client } from \"./LexRuntimeV2Client\";\nimport {\n  DeleteSessionCommand,\n  DeleteSessionCommandInput,\n  DeleteSessionCommandOutput,\n} from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand, GetSessionCommandInput, GetSessionCommandOutput } from \"./commands/GetSessionCommand\";\nimport { PutSessionCommand, PutSessionCommandInput, PutSessionCommandOutput } from \"./commands/PutSessionCommand\";\nimport {\n  RecognizeTextCommand,\n  RecognizeTextCommandInput,\n  RecognizeTextCommandOutput,\n} from \"./commands/RecognizeTextCommand\";\nimport {\n  RecognizeUtteranceCommand,\n  RecognizeUtteranceCommandInput,\n  RecognizeUtteranceCommandOutput,\n} from \"./commands/RecognizeUtteranceCommand\";\nimport {\n  StartConversationCommand,\n  StartConversationCommandInput,\n  StartConversationCommandOutput,\n} from \"./commands/StartConversationCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p></p>\n */\nexport class LexRuntimeV2 extends LexRuntimeV2Client {\n  /**\n   * <p>Removes session information for a specified bot, alias, and user ID. </p>\n   *          <p>You can use this operation to restart a conversation with a bot.\n   *          When you remove a session, the entire history of the session is removed\n   *          so that you can start again.</p>\n   *          <p>You don't need to delete a session. Sessions have a time limit and\n   *          will expire. Set the session time limit when you create the bot. The\n   *          default is 5 minutes, but you can specify anything between 1 minute and\n   *          24 hours.</p>\n   *          <p>If you specify a bot or alias ID that doesn't exist, you receive a\n   *             <code>BadRequestException.</code>\n   *          </p>\n   *          <p>If the locale doesn't exist in the bot, or if the locale hasn't been\n   *          enables for the alias, you receive a\n   *          <code>BadRequestException</code>.</p>\n   */\n  public deleteSession(\n    args: DeleteSessionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteSessionCommandOutput>;\n  public deleteSession(\n    args: DeleteSessionCommandInput,\n    cb: (err: any, data?: DeleteSessionCommandOutput) => void\n  ): void;\n  public deleteSession(\n    args: DeleteSessionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteSessionCommandOutput) => void\n  ): void;\n  public deleteSession(\n    args: DeleteSessionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteSessionCommandOutput) => void),\n    cb?: (err: any, data?: DeleteSessionCommandOutput) => void\n  ): Promise<DeleteSessionCommandOutput> | void {\n    const command = new DeleteSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns session information for a specified bot, alias, and\n   *          user.</p>\n   *          <p>For example, you can use this operation to retrieve session\n   *          information for a user that has left a long-running session in\n   *          use.</p>\n   *          <p>If the bot, alias, or session identifier doesn't exist, Amazon Lex V2\n   *          returns a <code>BadRequestException</code>. If the locale doesn't exist\n   *          or is not enabled for the alias, you receive a\n   *             <code>BadRequestException</code>.</p>\n   */\n  public getSession(args: GetSessionCommandInput, options?: __HttpHandlerOptions): Promise<GetSessionCommandOutput>;\n  public getSession(args: GetSessionCommandInput, cb: (err: any, data?: GetSessionCommandOutput) => void): void;\n  public getSession(\n    args: GetSessionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetSessionCommandOutput) => void\n  ): void;\n  public getSession(\n    args: GetSessionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetSessionCommandOutput) => void),\n    cb?: (err: any, data?: GetSessionCommandOutput) => void\n  ): Promise<GetSessionCommandOutput> | void {\n    const command = new GetSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a new session or modifies an existing session with an Amazon Lex V2\n   *          bot. Use this operation to enable your application to set the state of\n   *          the bot.</p>\n   */\n  public putSession(args: PutSessionCommandInput, options?: __HttpHandlerOptions): Promise<PutSessionCommandOutput>;\n  public putSession(args: PutSessionCommandInput, cb: (err: any, data?: PutSessionCommandOutput) => void): void;\n  public putSession(\n    args: PutSessionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutSessionCommandOutput) => void\n  ): void;\n  public putSession(\n    args: PutSessionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutSessionCommandOutput) => void),\n    cb?: (err: any, data?: PutSessionCommandOutput) => void\n  ): Promise<PutSessionCommandOutput> | void {\n    const command = new PutSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Sends user input to Amazon Lex V2. Client applications use this API to send\n   *          requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input\n   *          using the machine learning model that it build for the bot.</p>\n   *          <p>In response, Amazon Lex V2 returns the next message to convey to the user\n   *          and an optional response card to display.</p>\n   */\n  public recognizeText(\n    args: RecognizeTextCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<RecognizeTextCommandOutput>;\n  public recognizeText(\n    args: RecognizeTextCommandInput,\n    cb: (err: any, data?: RecognizeTextCommandOutput) => void\n  ): void;\n  public recognizeText(\n    args: RecognizeTextCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: RecognizeTextCommandOutput) => void\n  ): void;\n  public recognizeText(\n    args: RecognizeTextCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: RecognizeTextCommandOutput) => void),\n    cb?: (err: any, data?: RecognizeTextCommandOutput) => void\n  ): Promise<RecognizeTextCommandOutput> | void {\n    const command = new RecognizeTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Sends user input to Amazon Lex V2. You can send text or speech. Clients use\n   *          this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2\n   *          interprets the user input using the machine learning model built for\n   *          the bot.</p>\n   *          <p>The following request fields must be compressed with gzip and then\n   *          base64 encoded before you send them to Amazon Lex V2. </p>\n   *          <ul>\n   *             <li>\n   *                <p>requestAttributes</p>\n   *             </li>\n   *             <li>\n   *                <p>sessionState</p>\n   *             </li>\n   *          </ul>\n   *          <p>The following response fields are compressed using gzip and then\n   *          base64 encoded by Amazon Lex V2. Before you can use these fields, you must\n   *          decode and decompress them. </p>\n   *          <ul>\n   *             <li>\n   *                <p>inputTranscript</p>\n   *             </li>\n   *             <li>\n   *                <p>interpretations</p>\n   *             </li>\n   *             <li>\n   *                <p>messages</p>\n   *             </li>\n   *             <li>\n   *                <p>requestAttributes</p>\n   *             </li>\n   *             <li>\n   *                <p>sessionState</p>\n   *             </li>\n   *          </ul>\n   *          <p>The example contains a Java application that compresses and encodes\n   *          a Java object to send to Amazon Lex V2, and a second that decodes and\n   *          decompresses a response from Amazon Lex V2.</p>\n   */\n  public recognizeUtterance(\n    args: RecognizeUtteranceCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<RecognizeUtteranceCommandOutput>;\n  public recognizeUtterance(\n    args: RecognizeUtteranceCommandInput,\n    cb: (err: any, data?: RecognizeUtteranceCommandOutput) => void\n  ): void;\n  public recognizeUtterance(\n    args: RecognizeUtteranceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: RecognizeUtteranceCommandOutput) => void\n  ): void;\n  public recognizeUtterance(\n    args: RecognizeUtteranceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: RecognizeUtteranceCommandOutput) => void),\n    cb?: (err: any, data?: RecognizeUtteranceCommandOutput) => void\n  ): Promise<RecognizeUtteranceCommandOutput> | void {\n    const command = new RecognizeUtteranceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an HTTP/2 bidirectional event stream that enables you to send\n   *          audio, text, or DTMF input in real time. After your application starts\n   *          a conversation, users send input to Amazon Lex V2 as a stream of events. Amazon Lex V2\n   *          processes the incoming events and responds with streaming text or audio\n   *          events.\n   *       </p>\n   *          <p>Audio input must be in the following format: <code>audio/lpcm\n   *             sample-rate=8000 sample-size-bits=16 channel-count=1;\n   *             is-big-endian=false</code>.</p>\n   *          <p>The <code>StartConversation</code> operation is supported only in\n   *          the following SDKs: </p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForCpp/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for C++</a>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForJavaV2/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for Java V2</a>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <a href=\"https://docs.aws.amazon.com/goto/SdkForRubyV3/runtime.lex.v2-2020-08-07/StartConversation\">AWS SDK for Ruby V3</a>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  public startConversation(\n    args: StartConversationCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartConversationCommandOutput>;\n  public startConversation(\n    args: StartConversationCommandInput,\n    cb: (err: any, data?: StartConversationCommandOutput) => void\n  ): void;\n  public startConversation(\n    args: StartConversationCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartConversationCommandOutput) => void\n  ): void;\n  public startConversation(\n    args: StartConversationCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartConversationCommandOutput) => void),\n    cb?: (err: any, data?: StartConversationCommandOutput) => void\n  ): Promise<StartConversationCommandOutput> | void {\n    const command = new StartConversationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}