{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutSessionRequest, PutSessionResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1PutSessionCommand, serializeAws_restJson1PutSessionCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a new session or modifies an existing session with an Amazon Lex V2\n *          bot. Use this operation to enable your application to set the state of\n *          the bot.</p>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LexRuntimeV2Client, PutSessionCommand } from \"@aws-sdk/client-lex-runtime-v2\"; // ES Modules import\n * // const { LexRuntimeV2Client, PutSessionCommand } = require(\"@aws-sdk/client-lex-runtime-v2\"); // CommonJS import\n * const client = new LexRuntimeV2Client(config);\n * const command = new PutSessionCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link PutSessionCommandInput} for command's `input` shape.\n * @see {@link PutSessionCommandOutput} for command's `response` shape.\n * @see {@link LexRuntimeV2ClientResolvedConfig | config} for command's `input` shape.\n *\n */\n\nvar PutSessionCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutSessionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutSessionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutSessionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"LexRuntimeV2Client\";\n    var commandName = \"PutSessionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutSessionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PutSessionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutSessionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1PutSessionCommand(input, context);\n  };\n\n  PutSessionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1PutSessionCommand(output, context);\n  };\n\n  return PutSessionCommand;\n}($Command);\n\nexport { PutSessionCommand };","map":{"version":3,"mappings":";AACA,SAASA,iBAAT,EAA4BC,kBAA5B,QAAsD,oBAAtD;AACA,SACEC,yCADF,EAEEC,uCAFF,QAGO,4BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;AAmBA;AAAA;AAAA;EAAuCC,qCAAvC,CAKE;EACA;;;EAEA,2BAAqBC,KAArB,EAAkD;IAAlD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA6B,CAGhD;EACD;EAED;;;;;EAGAC,0DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,oBAAnB;IACA,IAAMC,WAAW,GAAG,mBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,iBAAiB,CAAC0B,kBAJY;MAKvDC,wBAAwB,EAAE1B,kBAAkB,CAACyB;IALU,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,wCAAR,UAAkBH,KAAlB,EAAiDuB,OAAjD,EAAwE;IACtE,OAAO5B,uCAAuC,CAACK,KAAD,EAAQuB,OAAR,CAA9C;EACD,CAFO;;EAIApB,0CAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,yCAAyC,CAAC8B,MAAD,EAASD,OAAT,CAAhD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAuCzB,QAAvC","names":["PutSessionRequest","PutSessionResponse","deserializeAws_restJson1PutSessionCommand","serializeAws_restJson1PutSessionCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutSessionCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/commands/PutSessionCommand.ts"],"sourcesContent":["import { LexRuntimeV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../LexRuntimeV2Client\";\nimport { PutSessionRequest, PutSessionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1PutSessionCommand,\n  serializeAws_restJson1PutSessionCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport interface PutSessionCommandInput extends PutSessionRequest {}\nexport interface PutSessionCommandOutput extends PutSessionResponse, __MetadataBearer {}\n\n/**\n * <p>Creates a new session or modifies an existing session with an Amazon Lex V2\n *          bot. Use this operation to enable your application to set the state of\n *          the bot.</p>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LexRuntimeV2Client, PutSessionCommand } from \"@aws-sdk/client-lex-runtime-v2\"; // ES Modules import\n * // const { LexRuntimeV2Client, PutSessionCommand } = require(\"@aws-sdk/client-lex-runtime-v2\"); // CommonJS import\n * const client = new LexRuntimeV2Client(config);\n * const command = new PutSessionCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link PutSessionCommandInput} for command's `input` shape.\n * @see {@link PutSessionCommandOutput} for command's `response` shape.\n * @see {@link LexRuntimeV2ClientResolvedConfig | config} for command's `input` shape.\n *\n */\nexport class PutSessionCommand extends $Command<\n  PutSessionCommandInput,\n  PutSessionCommandOutput,\n  LexRuntimeV2ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutSessionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: LexRuntimeV2ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutSessionCommandInput, PutSessionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"LexRuntimeV2Client\";\n    const commandName = \"PutSessionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutSessionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PutSessionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutSessionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restJson1PutSessionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutSessionCommandOutput> {\n    return deserializeAws_restJson1PutSessionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}