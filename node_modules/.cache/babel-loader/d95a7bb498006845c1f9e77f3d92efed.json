{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var getEndpointFromRegion = function (input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, tls, region, dnsHostRegex, hostname;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = input.tls, tls = _a === void 0 ? true : _a;\n          return [4\n          /*yield*/\n          , input.region()];\n\n        case 1:\n          region = _c.sent();\n          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n\n          if (!dnsHostRegex.test(region)) {\n            throw new Error(\"Invalid region in client config\");\n          }\n\n          return [4\n          /*yield*/\n          , input.regionInfoProvider(region)];\n\n        case 2:\n          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;\n\n          if (!hostname) {\n            throw new Error(\"Cannot resolve hostname from client config\");\n          }\n\n          return [2\n          /*return*/\n          , input.urlParser((tls ? \"https:\" : \"http:\") + \"//\" + hostname)];\n      }\n    });\n  });\n};","map":{"version":3,"mappings":";AASA,OAAO,IAAMA,qBAAqB,GAAG,UAAOC,KAAP,EAA0C;EAAA;;;;;;;;UACrEC,KAAeD,KAAK,IAApB,KAAG,mBAAG,IAAH,GAAOC,EAAV;UACO;UAAA;UAAA,EAAMD,KAAK,CAACE,MAAN,EAAN;;;UAATA,MAAM,GAAGC,SAAT;UAEAC,YAAY,GAAG,IAAIC,MAAJ,CAAW,0DAAX,CAAf;;UACN,IAAI,CAACD,YAAY,CAACE,IAAb,CAAkBJ,MAAlB,CAAL,EAAgC;YAC9B,MAAM,IAAIK,KAAJ,CAAU,iCAAV,CAAN;UACD;;UAEqB;UAAA;UAAA,EAAMP,KAAK,CAACQ,kBAAN,CAAyBN,MAAzB,CAAN;;;UAAdO,QAAQ,GAAK,OAACN,SAAD,MAAwC,IAAxC,IAAwCO,aAAxC,GAAwCA,EAAxC,GAA4C,EAA5C,EAA8CD,QAA3D;;UACR,IAAI,CAACA,QAAL,EAAe;YACb,MAAM,IAAIF,KAAJ,CAAU,4CAAV,CAAN;UACD;;UAED;UAAA;UAAA,EAAOP,KAAK,CAACW,SAAN,CAAgB,CAAGC,GAAG,GAAG,QAAH,GAAc,OAApB,IAA2B,IAA3B,GAAgCH,QAAhD,CAAP;;;GAd6E;AAe9E,CAfM","names":["getEndpointFromRegion","input","_a","region","_c","dnsHostRegex","RegExp","test","Error","regionInfoProvider","hostname","_b","urlParser","tls"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/config-resolver/src/endpointsConfig/utils/getEndpointFromRegion.ts"],"sourcesContent":["import { Provider, RegionInfoProvider, UrlParser } from \"@aws-sdk/types\";\n\ninterface GetEndpointFromRegionOptions {\n  region: Provider<string>;\n  tls?: boolean;\n  regionInfoProvider: RegionInfoProvider;\n  urlParser: UrlParser;\n}\n\nexport const getEndpointFromRegion = async (input: GetEndpointFromRegionOptions) => {\n  const { tls = true } = input;\n  const region = await input.region();\n\n  const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n  if (!dnsHostRegex.test(region)) {\n    throw new Error(\"Invalid region in client config\");\n  }\n\n  const { hostname } = (await input.regionInfoProvider(region)) ?? {};\n  if (!hostname) {\n    throw new Error(\"Cannot resolve hostname from client config\");\n  }\n\n  return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"]},"metadata":{},"sourceType":"module"}