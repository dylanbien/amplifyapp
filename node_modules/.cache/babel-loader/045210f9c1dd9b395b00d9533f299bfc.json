{"ast":null,"code":"import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"./constants\";\nexport var getDefaultRetryQuota = function (initialRetryTokens, options) {\n  var _a, _b, _c;\n\n  var MAX_CAPACITY = initialRetryTokens;\n  var noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : NO_RETRY_INCREMENT;\n  var retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : RETRY_COST;\n  var timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : TIMEOUT_RETRY_COST;\n  var availableCapacity = initialRetryTokens;\n\n  var getCapacityAmount = function (error) {\n    return error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost;\n  };\n\n  var hasRetryTokens = function (error) {\n    return getCapacityAmount(error) <= availableCapacity;\n  };\n\n  var retrieveRetryTokens = function (error) {\n    if (!hasRetryTokens(error)) {\n      // retryStrategy should stop retrying, and return last error\n      throw new Error(\"No retry token available\");\n    }\n\n    var capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n\n  var releaseRetryTokens = function (capacityReleaseAmount) {\n    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n\n  return Object.freeze({\n    hasRetryTokens: hasRetryTokens,\n    retrieveRetryTokens: retrieveRetryTokens,\n    releaseRetryTokens: releaseRetryTokens\n  });\n};","map":{"version":3,"mappings":"AAEA,SAASA,kBAAT,EAA6BC,UAA7B,EAAyCC,kBAAzC,QAAmE,aAAnE;AAsBA,OAAO,IAAMC,oBAAoB,GAAG,UAACC,kBAAD,EAA6BC,OAA7B,EAA+D;;;EACjG,IAAMC,YAAY,GAAGF,kBAArB;EACA,IAAMG,gBAAgB,GAAG,aAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,gBAAT,MAAyB,IAAzB,IAAyBC,aAAzB,GAAyBA,EAAzB,GAA6BR,kBAAtD;EACA,IAAMS,SAAS,GAAG,aAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,SAAT,MAAkB,IAAlB,IAAkBC,aAAlB,GAAkBA,EAAlB,GAAsBT,UAAxC;EACA,IAAMU,gBAAgB,GAAG,aAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,gBAAT,MAAyB,IAAzB,IAAyBC,aAAzB,GAAyBA,EAAzB,GAA6BV,kBAAtD;EAEA,IAAIW,iBAAiB,GAAGT,kBAAxB;;EAEA,IAAMU,iBAAiB,GAAG,UAACC,KAAD,EAAgB;IAAK,OAACA,KAAK,CAACC,IAAN,KAAe,cAAf,GAAgCL,gBAAhC,GAAmDF,SAApD;EAA8D,CAA7G;;EAEA,IAAMQ,cAAc,GAAG,UAACF,KAAD,EAAgB;IAAK,wBAAiB,CAACA,KAAD,CAAjB,IAA4BF,iBAA5B;EAA6C,CAAzF;;EAEA,IAAMK,mBAAmB,GAAG,UAACH,KAAD,EAAgB;IAC1C,IAAI,CAACE,cAAc,CAACF,KAAD,CAAnB,EAA4B;MAC1B;MACA,MAAM,IAAII,KAAJ,CAAU,0BAAV,CAAN;IACD;;IACD,IAAMC,cAAc,GAAGN,iBAAiB,CAACC,KAAD,CAAxC;IACAF,iBAAiB,IAAIO,cAArB;IACA,OAAOA,cAAP;EACD,CARD;;EAUA,IAAMC,kBAAkB,GAAG,UAACC,qBAAD,EAA+B;IACxDT,iBAAiB,IAAIS,qBAAqB,SAArB,yBAAqB,WAArB,2BAAyBf,gBAA9C;IACAM,iBAAiB,GAAGU,IAAI,CAACC,GAAL,CAASX,iBAAT,EAA4BP,YAA5B,CAApB;EACD,CAHD;;EAKA,OAAOmB,MAAM,CAACC,MAAP,CAAc;IACnBT,cAAc,gBADK;IAEnBC,mBAAmB,qBAFA;IAGnBG,kBAAkB;EAHC,CAAd,CAAP;AAKD,CAhCM","names":["NO_RETRY_INCREMENT","RETRY_COST","TIMEOUT_RETRY_COST","getDefaultRetryQuota","initialRetryTokens","options","MAX_CAPACITY","noRetryIncrement","_a","retryCost","_b","timeoutRetryCost","_c","availableCapacity","getCapacityAmount","error","name","hasRetryTokens","retrieveRetryTokens","Error","capacityAmount","releaseRetryTokens","capacityReleaseAmount","Math","min","Object","freeze"],"sources":["/Users/dylanbienstock/Documents/cs98/hack-a-thing-1/amplifyapp/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/middleware-retry/src/defaultRetryQuota.ts"],"sourcesContent":["import { SdkError } from \"@aws-sdk/types\";\n\nimport { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"./constants\";\nimport { RetryQuota } from \"./types\";\n\nexport interface DefaultRetryQuotaOptions {\n  /**\n   * The total amount of retry token to be incremented from retry token balance\n   * if an SDK operation invocation succeeds without requiring a retry request.\n   */\n  noRetryIncrement?: number;\n\n  /**\n   * The total amount of retry tokens to be decremented from retry token balance.\n   */\n  retryCost?: number;\n\n  /**\n   * The total amount of retry tokens to be decremented from retry token balance\n   * when a throttling error is encountered.\n   */\n  timeoutRetryCost?: number;\n}\n\nexport const getDefaultRetryQuota = (initialRetryTokens: number, options?: DefaultRetryQuotaOptions): RetryQuota => {\n  const MAX_CAPACITY = initialRetryTokens;\n  const noRetryIncrement = options?.noRetryIncrement ?? NO_RETRY_INCREMENT;\n  const retryCost = options?.retryCost ?? RETRY_COST;\n  const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;\n\n  let availableCapacity = initialRetryTokens;\n\n  const getCapacityAmount = (error: SdkError) => (error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost);\n\n  const hasRetryTokens = (error: SdkError) => getCapacityAmount(error) <= availableCapacity;\n\n  const retrieveRetryTokens = (error: SdkError) => {\n    if (!hasRetryTokens(error)) {\n      // retryStrategy should stop retrying, and return last error\n      throw new Error(\"No retry token available\");\n    }\n    const capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n\n  const releaseRetryTokens = (capacityReleaseAmount?: number) => {\n    availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n\n  return Object.freeze({\n    hasRetryTokens,\n    retrieveRetryTokens,\n    releaseRetryTokens,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}